//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.0.0.0.
namespace Loose
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    using System.Linq;
    using System.ComponentModel;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("Message", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("Message", Namespace="ESFA/ILR/2020-21")]
    public partial class Message : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeader _header;
        
        [System.Xml.Serialization.XmlElementAttribute("Header", Namespace="ESFA/ILR/2020-21")]
        public MessageHeader Header
        {
            get
            {
                return _header;
            }
            set
            {
                if (_header == value)
                    return;
                if (_header == null || value == null || !_header.Equals(value))
                {
                    _header = value;
                    OnPropertyChanged(nameof(Header));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageSourceFilesSourceFile> _sourceFiles;
        
        [System.Xml.Serialization.XmlArrayAttribute("SourceFiles", Namespace="ESFA/ILR/2020-21")]
        [System.Xml.Serialization.XmlArrayItemAttribute("SourceFile", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageSourceFilesSourceFile> SourceFiles
        {
            get
            {
                return _sourceFiles;
            }
            private set
            {
                if (_sourceFiles == value)
                    return;
                if (_sourceFiles == null || value == null || !_sourceFiles.SequenceEqual(value))
                {
                    _sourceFiles = value;
                    OnPropertyChanged(nameof(SourceFiles));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SourceFiles-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SourceFiles collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SourceFilesSpecified
        {
            get
            {
                return (this.SourceFiles.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Message" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Message" /> class.</para>
        /// </summary>
        public Message()
        {
            this._sourceFiles = new System.Collections.Generic.List<MessageSourceFilesSourceFile>();
            this._learner = new System.Collections.Generic.List<MessageLearner>();
            this._learnerDestinationandProgression = new System.Collections.Generic.List<MessageLearnerDestinationandProgression>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageLearningProvider _learningProvider;
        
        [System.Xml.Serialization.XmlElementAttribute("LearningProvider", Namespace="ESFA/ILR/2020-21")]
        public MessageLearningProvider LearningProvider
        {
            get
            {
                return _learningProvider;
            }
            set
            {
                if (_learningProvider == value)
                    return;
                if (_learningProvider == null || value == null || !_learningProvider.Equals(value))
                {
                    _learningProvider = value;
                    OnPropertyChanged(nameof(LearningProvider));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearner> _learner;
        
        [System.Xml.Serialization.XmlElementAttribute("Learner", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearner> Learner
        {
            get
            {
                return _learner;
            }
            private set
            {
                if (_learner == value)
                    return;
                if (_learner == null || value == null || !_learner.SequenceEqual(value))
                {
                    _learner = value;
                    OnPropertyChanged(nameof(Learner));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Learner-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Learner collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerSpecified
        {
            get
            {
                return (this.Learner.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerDestinationandProgression> _learnerDestinationandProgression;
        
        [System.Xml.Serialization.XmlElementAttribute("LearnerDestinationandProgression", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerDestinationandProgression> LearnerDestinationandProgression
        {
            get
            {
                return _learnerDestinationandProgression;
            }
            private set
            {
                if (_learnerDestinationandProgression == value)
                    return;
                if (_learnerDestinationandProgression == null || value == null || !_learnerDestinationandProgression.SequenceEqual(value))
                {
                    _learnerDestinationandProgression = value;
                    OnPropertyChanged(nameof(LearnerDestinationandProgression));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnerDestinationandProgression-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearnerDestinationandProgression collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerDestinationandProgressionSpecified
        {
            get
            {
                return (this.LearnerDestinationandProgression.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeader", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageHeader : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeaderCollectionDetails _collectionDetails;
        
        [System.Xml.Serialization.XmlElementAttribute("CollectionDetails", Namespace="ESFA/ILR/2020-21")]
        public MessageHeaderCollectionDetails CollectionDetails
        {
            get
            {
                return _collectionDetails;
            }
            set
            {
                if (_collectionDetails == value)
                    return;
                if (_collectionDetails == null || value == null || !_collectionDetails.Equals(value))
                {
                    _collectionDetails = value;
                    OnPropertyChanged(nameof(CollectionDetails));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeaderSource _source;
        
        [System.Xml.Serialization.XmlElementAttribute("Source", Namespace="ESFA/ILR/2020-21")]
        public MessageHeaderSource Source
        {
            get
            {
                return _source;
            }
            set
            {
                if (_source == value)
                    return;
                if (_source == null || value == null || !_source.Equals(value))
                {
                    _source = value;
                    OnPropertyChanged(nameof(Source));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeaderCollectionDetails", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageHeaderCollectionDetails : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeaderCollectionDetailsCollection _collection;
        
        [System.Xml.Serialization.XmlElementAttribute("Collection", Namespace="ESFA/ILR/2020-21")]
        public MessageHeaderCollectionDetailsCollection Collection
        {
            get
            {
                return _collection;
            }
            set
            {
                if (!_collection.Equals(value))
                {
                    _collection = value;
                    OnPropertyChanged(nameof(Collection));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeaderCollectionDetailsYear _year;
        
        [System.Xml.Serialization.XmlElementAttribute("Year", Namespace="ESFA/ILR/2020-21")]
        public MessageHeaderCollectionDetailsYear Year
        {
            get
            {
                return _year;
            }
            set
            {
                if (!_year.Equals(value))
                {
                    _year = value;
                    OnPropertyChanged(nameof(Year));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _filePreparationDate;
        
        [System.Xml.Serialization.XmlElementAttribute("FilePreparationDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime FilePreparationDate
        {
            get
            {
                return _filePreparationDate;
            }
            set
            {
                if (!_filePreparationDate.Equals(value))
                {
                    _filePreparationDate = value;
                    OnPropertyChanged(nameof(FilePreparationDate));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeaderCollectionDetailsCollection", Namespace="ESFA/ILR/2020-21")]
    public enum MessageHeaderCollectionDetailsCollection
    {
        
        ILR,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeaderCollectionDetailsYear", Namespace="ESFA/ILR/2020-21")]
    public enum MessageHeaderCollectionDetailsYear
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("2021")]
        Item2021,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeaderSource", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageHeaderSource : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MessageHeaderSourceProtectiveMarking _protectiveMarking;
        
        [System.Xml.Serialization.XmlElementAttribute("ProtectiveMarking", Namespace="ESFA/ILR/2020-21")]
        public MessageHeaderSourceProtectiveMarking ProtectiveMarking
        {
            get
            {
                return _protectiveMarking;
            }
            set
            {
                if (!_protectiveMarking.Equals(value))
                {
                    _protectiveMarking = value;
                    OnPropertyChanged(nameof(ProtectiveMarking));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _uKPRN;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 10000000.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999999 .</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "10000000", "99999999 ")]
        [System.Xml.Serialization.XmlElementAttribute("UKPRN", Namespace="ESFA/ILR/2020-21")]
        public int UKPRN
        {
            get
            {
                return _uKPRN;
            }
            set
            {
                if (!_uKPRN.Equals(value))
                {
                    _uKPRN = value;
                    OnPropertyChanged(nameof(UKPRN));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _softwareSupplier;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(40)]
        [System.Xml.Serialization.XmlElementAttribute("SoftwareSupplier", Namespace="ESFA/ILR/2020-21")]
        public string SoftwareSupplier
        {
            get
            {
                return _softwareSupplier;
            }
            set
            {
                if (_softwareSupplier == value)
                    return;
                if (_softwareSupplier == null || value == null || !_softwareSupplier.Equals(value))
                {
                    _softwareSupplier = value;
                    OnPropertyChanged(nameof(SoftwareSupplier));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _softwarePackage;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 30.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(30)]
        [System.Xml.Serialization.XmlElementAttribute("SoftwarePackage", Namespace="ESFA/ILR/2020-21")]
        public string SoftwarePackage
        {
            get
            {
                return _softwarePackage;
            }
            set
            {
                if (_softwarePackage == value)
                    return;
                if (_softwarePackage == null || value == null || !_softwarePackage.Equals(value))
                {
                    _softwarePackage = value;
                    OnPropertyChanged(nameof(SoftwarePackage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _release;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlElementAttribute("Release", Namespace="ESFA/ILR/2020-21")]
        public string Release
        {
            get
            {
                return _release;
            }
            set
            {
                if (_release == value)
                    return;
                if (_release == null || value == null || !_release.Equals(value))
                {
                    _release = value;
                    OnPropertyChanged(nameof(Release));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _serialNo;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{1,2}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,2}")]
        [System.Xml.Serialization.XmlElementAttribute("SerialNo", Namespace="ESFA/ILR/2020-21")]
        public string SerialNo
        {
            get
            {
                return _serialNo;
            }
            set
            {
                if (_serialNo == value)
                    return;
                if (_serialNo == null || value == null || !_serialNo.Equals(value))
                {
                    _serialNo = value;
                    OnPropertyChanged(nameof(SerialNo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _dateTime;
        
        [System.Xml.Serialization.XmlElementAttribute("DateTime", Namespace="ESFA/ILR/2020-21", DataType="dateTime")]
        public System.DateTime DateTime
        {
            get
            {
                return _dateTime;
            }
            set
            {
                if (!_dateTime.Equals(value))
                {
                    _dateTime = value;
                    OnPropertyChanged(nameof(DateTime));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _referenceData;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("ReferenceData", Namespace="ESFA/ILR/2020-21")]
        public string ReferenceData
        {
            get
            {
                return _referenceData;
            }
            set
            {
                if (_referenceData == value)
                    return;
                if (_referenceData == null || value == null || !_referenceData.Equals(value))
                {
                    _referenceData = value;
                    OnPropertyChanged(nameof(ReferenceData));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _componentSetVersion;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlElementAttribute("ComponentSetVersion", Namespace="ESFA/ILR/2020-21")]
        public string ComponentSetVersion
        {
            get
            {
                return _componentSetVersion;
            }
            set
            {
                if (_componentSetVersion == value)
                    return;
                if (_componentSetVersion == null || value == null || !_componentSetVersion.Equals(value))
                {
                    _componentSetVersion = value;
                    OnPropertyChanged(nameof(ComponentSetVersion));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageHeaderSourceProtectiveMarking", Namespace="ESFA/ILR/2020-21")]
    public enum MessageHeaderSourceProtectiveMarking
    {
        
        [System.Xml.Serialization.XmlEnumAttribute("OFFICIAL-SENSITIVE-Personal")]
        OFFICIAL_SENSITIVE_Personal,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageSourceFiles", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageSourceFiles : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageSourceFilesSourceFile> _sourceFile;
        
        [System.Xml.Serialization.XmlElementAttribute("SourceFile", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageSourceFilesSourceFile> SourceFile
        {
            get
            {
                return _sourceFile;
            }
            private set
            {
                if (_sourceFile == value)
                    return;
                if (_sourceFile == null || value == null || !_sourceFile.SequenceEqual(value))
                {
                    _sourceFile = value;
                    OnPropertyChanged(nameof(SourceFile));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageSourceFiles" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageSourceFiles" /> class.</para>
        /// </summary>
        public MessageSourceFiles()
        {
            this._sourceFile = new System.Collections.Generic.List<MessageSourceFilesSourceFile>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageSourceFilesSourceFile", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageSourceFilesSourceFile : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _sourceFileName;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Xml.Serialization.XmlElementAttribute("SourceFileName", Namespace="ESFA/ILR/2020-21")]
        public string SourceFileName
        {
            get
            {
                return _sourceFileName;
            }
            set
            {
                if (_sourceFileName == value)
                    return;
                if (_sourceFileName == null || value == null || !_sourceFileName.Equals(value))
                {
                    _sourceFileName = value;
                    OnPropertyChanged(nameof(SourceFileName));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _filePreparationDate;
        
        [System.Xml.Serialization.XmlElementAttribute("FilePreparationDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime FilePreparationDate
        {
            get
            {
                return _filePreparationDate;
            }
            set
            {
                if (!_filePreparationDate.Equals(value))
                {
                    _filePreparationDate = value;
                    OnPropertyChanged(nameof(FilePreparationDate));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _softwareSupplier;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 40.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(40)]
        [System.Xml.Serialization.XmlElementAttribute("SoftwareSupplier", Namespace="ESFA/ILR/2020-21")]
        public string SoftwareSupplier
        {
            get
            {
                return _softwareSupplier;
            }
            set
            {
                if (_softwareSupplier == value)
                    return;
                if (_softwareSupplier == null || value == null || !_softwareSupplier.Equals(value))
                {
                    _softwareSupplier = value;
                    OnPropertyChanged(nameof(SoftwareSupplier));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _softwarePackage;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 30.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(30)]
        [System.Xml.Serialization.XmlElementAttribute("SoftwarePackage", Namespace="ESFA/ILR/2020-21")]
        public string SoftwarePackage
        {
            get
            {
                return _softwarePackage;
            }
            set
            {
                if (_softwarePackage == value)
                    return;
                if (_softwarePackage == null || value == null || !_softwarePackage.Equals(value))
                {
                    _softwarePackage = value;
                    OnPropertyChanged(nameof(SoftwarePackage));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _release;
        
        /// <summary>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Xml.Serialization.XmlElementAttribute("Release", Namespace="ESFA/ILR/2020-21")]
        public string Release
        {
            get
            {
                return _release;
            }
            set
            {
                if (_release == value)
                    return;
                if (_release == null || value == null || !_release.Equals(value))
                {
                    _release = value;
                    OnPropertyChanged(nameof(Release));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _serialNo;
        
        /// <summary>
        /// <para xml:lang="en">Pattern: [0-9]{1,2}.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,2}")]
        [System.Xml.Serialization.XmlElementAttribute("SerialNo", Namespace="ESFA/ILR/2020-21")]
        public string SerialNo
        {
            get
            {
                return _serialNo;
            }
            set
            {
                if (_serialNo == value)
                    return;
                if (_serialNo == null || value == null || !_serialNo.Equals(value))
                {
                    _serialNo = value;
                    OnPropertyChanged(nameof(SerialNo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _dateTime;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("DateTime", Namespace="ESFA/ILR/2020-21", DataType="dateTime")]
        public System.DateTime DateTimeValue
        {
            get
            {
                return _dateTime;
            }
            set
            {
                if (!_dateTime.Equals(value))
                {
                    _dateTime = value;
                    OnPropertyChanged(nameof(DateTimeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DateTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DateTimeValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> DateTime
        {
            get
            {
                if (this.DateTimeValueSpecified)
                {
                    return this.DateTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.DateTimeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.DateTimeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.DateTimeValue = value.GetValueOrDefault();
                    this.DateTimeValueSpecified = value.HasValue;
                    OnPropertyChanged("DateTime");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearningProvider", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearningProvider : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _uKPRN;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 10000000.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99999999.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "10000000", "99999999")]
        [System.Xml.Serialization.XmlElementAttribute("UKPRN", Namespace="ESFA/ILR/2020-21")]
        public int UKPRN
        {
            get
            {
                return _uKPRN;
            }
            set
            {
                if (!_uKPRN.Equals(value))
                {
                    _uKPRN = value;
                    OnPropertyChanged(nameof(UKPRN));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearner", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearner : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnRefNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("LearnRefNumber", Namespace="ESFA/ILR/2020-21")]
        public string LearnRefNumber
        {
            get
            {
                return _learnRefNumber;
            }
            set
            {
                if (_learnRefNumber == value)
                    return;
                if (_learnRefNumber == null || value == null || !_learnRefNumber.Equals(value))
                {
                    _learnRefNumber = value;
                    OnPropertyChanged(nameof(LearnRefNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _prevLearnRefNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("PrevLearnRefNumber", Namespace="ESFA/ILR/2020-21")]
        public string PrevLearnRefNumber
        {
            get
            {
                return _prevLearnRefNumber;
            }
            set
            {
                if (_prevLearnRefNumber == value)
                    return;
                if (_prevLearnRefNumber == null || value == null || !_prevLearnRefNumber.Equals(value))
                {
                    _prevLearnRefNumber = value;
                    OnPropertyChanged(nameof(PrevLearnRefNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _prevUKPRN;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PrevUKPRN", Namespace="ESFA/ILR/2020-21")]
        public long PrevUKPRNValue
        {
            get
            {
                return _prevUKPRN;
            }
            set
            {
                if (!_prevUKPRN.Equals(value))
                {
                    _prevUKPRN = value;
                    OnPropertyChanged(nameof(PrevUKPRNValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrevUKPRN-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrevUKPRN property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PrevUKPRNValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PrevUKPRN
        {
            get
            {
                if (this.PrevUKPRNValueSpecified)
                {
                    return this.PrevUKPRNValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PrevUKPRNValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PrevUKPRNValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PrevUKPRNValue = value.GetValueOrDefault();
                    this.PrevUKPRNValueSpecified = value.HasValue;
                    OnPropertyChanged("PrevUKPRN");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _pMUKPRN;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PMUKPRN", Namespace="ESFA/ILR/2020-21")]
        public long PMUKPRNValue
        {
            get
            {
                return _pMUKPRN;
            }
            set
            {
                if (!_pMUKPRN.Equals(value))
                {
                    _pMUKPRN = value;
                    OnPropertyChanged(nameof(PMUKPRNValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PMUKPRN-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PMUKPRN property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PMUKPRNValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PMUKPRN
        {
            get
            {
                if (this.PMUKPRNValueSpecified)
                {
                    return this.PMUKPRNValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PMUKPRNValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PMUKPRNValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PMUKPRNValue = value.GetValueOrDefault();
                    this.PMUKPRNValueSpecified = value.HasValue;
                    OnPropertyChanged("PMUKPRN");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _campId;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("CampId", Namespace="ESFA/ILR/2020-21")]
        public string CampId
        {
            get
            {
                return _campId;
            }
            set
            {
                if (_campId == value)
                    return;
                if (_campId == null || value == null || !_campId.Equals(value))
                {
                    _campId = value;
                    OnPropertyChanged(nameof(CampId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _uLN;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ULN", Namespace="ESFA/ILR/2020-21")]
        public long ULNValue
        {
            get
            {
                return _uLN;
            }
            set
            {
                if (!_uLN.Equals(value))
                {
                    _uLN = value;
                    OnPropertyChanged(nameof(ULNValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ULN-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ULN property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ULNValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ULN
        {
            get
            {
                if (this.ULNValueSpecified)
                {
                    return this.ULNValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ULNValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ULNValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ULNValue = value.GetValueOrDefault();
                    this.ULNValueSpecified = value.HasValue;
                    OnPropertyChanged("ULN");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _familyName;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("FamilyName", Namespace="ESFA/ILR/2020-21")]
        public string FamilyName
        {
            get
            {
                return _familyName;
            }
            set
            {
                if (_familyName == value)
                    return;
                if (_familyName == null || value == null || !_familyName.Equals(value))
                {
                    _familyName = value;
                    OnPropertyChanged(nameof(FamilyName));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _givenNames;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("GivenNames", Namespace="ESFA/ILR/2020-21")]
        public string GivenNames
        {
            get
            {
                return _givenNames;
            }
            set
            {
                if (_givenNames == value)
                    return;
                if (_givenNames == null || value == null || !_givenNames.Equals(value))
                {
                    _givenNames = value;
                    OnPropertyChanged(nameof(GivenNames));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _dateOfBirth;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("DateOfBirth", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime DateOfBirthValue
        {
            get
            {
                return _dateOfBirth;
            }
            set
            {
                if (!_dateOfBirth.Equals(value))
                {
                    _dateOfBirth = value;
                    OnPropertyChanged(nameof(DateOfBirthValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DateOfBirth-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateOfBirth property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DateOfBirthValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> DateOfBirth
        {
            get
            {
                if (this.DateOfBirthValueSpecified)
                {
                    return this.DateOfBirthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.DateOfBirthValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.DateOfBirthValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.DateOfBirthValue = value.GetValueOrDefault();
                    this.DateOfBirthValueSpecified = value.HasValue;
                    OnPropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _ethnicity;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("Ethnicity", Namespace="ESFA/ILR/2020-21")]
        public long EthnicityValue
        {
            get
            {
                return _ethnicity;
            }
            set
            {
                if (!_ethnicity.Equals(value))
                {
                    _ethnicity = value;
                    OnPropertyChanged(nameof(EthnicityValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ethnicity-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Ethnicity property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EthnicityValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> Ethnicity
        {
            get
            {
                if (this.EthnicityValueSpecified)
                {
                    return this.EthnicityValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.EthnicityValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.EthnicityValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.EthnicityValue = value.GetValueOrDefault();
                    this.EthnicityValueSpecified = value.HasValue;
                    OnPropertyChanged("Ethnicity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _sex;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("Sex", Namespace="ESFA/ILR/2020-21")]
        public string Sex
        {
            get
            {
                return _sex;
            }
            set
            {
                if (_sex == value)
                    return;
                if (_sex == null || value == null || !_sex.Equals(value))
                {
                    _sex = value;
                    OnPropertyChanged(nameof(Sex));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _lLDDHealthProb;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LLDDHealthProb", Namespace="ESFA/ILR/2020-21")]
        public long LLDDHealthProbValue
        {
            get
            {
                return _lLDDHealthProb;
            }
            set
            {
                if (!_lLDDHealthProb.Equals(value))
                {
                    _lLDDHealthProb = value;
                    OnPropertyChanged(nameof(LLDDHealthProbValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LLDDHealthProb-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LLDDHealthProb property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LLDDHealthProbValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> LLDDHealthProb
        {
            get
            {
                if (this.LLDDHealthProbValueSpecified)
                {
                    return this.LLDDHealthProbValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LLDDHealthProbValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LLDDHealthProbValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LLDDHealthProbValue = value.GetValueOrDefault();
                    this.LLDDHealthProbValueSpecified = value.HasValue;
                    OnPropertyChanged("LLDDHealthProb");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _nINumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("NINumber", Namespace="ESFA/ILR/2020-21")]
        public string NINumber
        {
            get
            {
                return _nINumber;
            }
            set
            {
                if (_nINumber == value)
                    return;
                if (_nINumber == null || value == null || !_nINumber.Equals(value))
                {
                    _nINumber = value;
                    OnPropertyChanged(nameof(NINumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _priorAttain;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PriorAttain", Namespace="ESFA/ILR/2020-21")]
        public long PriorAttainValue
        {
            get
            {
                return _priorAttain;
            }
            set
            {
                if (!_priorAttain.Equals(value))
                {
                    _priorAttain = value;
                    OnPropertyChanged(nameof(PriorAttainValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PriorAttain-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PriorAttain property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PriorAttainValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PriorAttain
        {
            get
            {
                if (this.PriorAttainValueSpecified)
                {
                    return this.PriorAttainValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PriorAttainValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PriorAttainValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PriorAttainValue = value.GetValueOrDefault();
                    this.PriorAttainValueSpecified = value.HasValue;
                    OnPropertyChanged("PriorAttain");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _accom;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("Accom", Namespace="ESFA/ILR/2020-21")]
        public long AccomValue
        {
            get
            {
                return _accom;
            }
            set
            {
                if (!_accom.Equals(value))
                {
                    _accom = value;
                    OnPropertyChanged(nameof(AccomValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AccomValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> Accom
        {
            get
            {
                if (this.AccomValueSpecified)
                {
                    return this.AccomValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AccomValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AccomValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AccomValue = value.GetValueOrDefault();
                    this.AccomValueSpecified = value.HasValue;
                    OnPropertyChanged("Accom");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _aLSCost;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ALSCost", Namespace="ESFA/ILR/2020-21")]
        public long ALSCostValue
        {
            get
            {
                return _aLSCost;
            }
            set
            {
                if (!_aLSCost.Equals(value))
                {
                    _aLSCost = value;
                    OnPropertyChanged(nameof(ALSCostValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ALSCost-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ALSCost property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ALSCostValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ALSCost
        {
            get
            {
                if (this.ALSCostValueSpecified)
                {
                    return this.ALSCostValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ALSCostValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ALSCostValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ALSCostValue = value.GetValueOrDefault();
                    this.ALSCostValueSpecified = value.HasValue;
                    OnPropertyChanged("ALSCost");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _planLearnHours;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PlanLearnHours", Namespace="ESFA/ILR/2020-21")]
        public long PlanLearnHoursValue
        {
            get
            {
                return _planLearnHours;
            }
            set
            {
                if (!_planLearnHours.Equals(value))
                {
                    _planLearnHours = value;
                    OnPropertyChanged(nameof(PlanLearnHoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlanLearnHours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlanLearnHours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PlanLearnHoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PlanLearnHours
        {
            get
            {
                if (this.PlanLearnHoursValueSpecified)
                {
                    return this.PlanLearnHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PlanLearnHoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PlanLearnHoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PlanLearnHoursValue = value.GetValueOrDefault();
                    this.PlanLearnHoursValueSpecified = value.HasValue;
                    OnPropertyChanged("PlanLearnHours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _planEEPHours;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PlanEEPHours", Namespace="ESFA/ILR/2020-21")]
        public long PlanEEPHoursValue
        {
            get
            {
                return _planEEPHours;
            }
            set
            {
                if (!_planEEPHours.Equals(value))
                {
                    _planEEPHours = value;
                    OnPropertyChanged(nameof(PlanEEPHoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlanEEPHours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlanEEPHours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PlanEEPHoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PlanEEPHours
        {
            get
            {
                if (this.PlanEEPHoursValueSpecified)
                {
                    return this.PlanEEPHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PlanEEPHoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PlanEEPHoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PlanEEPHoursValue = value.GetValueOrDefault();
                    this.PlanEEPHoursValueSpecified = value.HasValue;
                    OnPropertyChanged("PlanEEPHours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _mathGrade;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("MathGrade", Namespace="ESFA/ILR/2020-21")]
        public string MathGrade
        {
            get
            {
                return _mathGrade;
            }
            set
            {
                if (_mathGrade == value)
                    return;
                if (_mathGrade == null || value == null || !_mathGrade.Equals(value))
                {
                    _mathGrade = value;
                    OnPropertyChanged(nameof(MathGrade));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _engGrade;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("EngGrade", Namespace="ESFA/ILR/2020-21")]
        public string EngGrade
        {
            get
            {
                return _engGrade;
            }
            set
            {
                if (_engGrade == value)
                    return;
                if (_engGrade == null || value == null || !_engGrade.Equals(value))
                {
                    _engGrade = value;
                    OnPropertyChanged(nameof(EngGrade));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _postcodePrior;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("PostcodePrior", Namespace="ESFA/ILR/2020-21")]
        public string PostcodePrior
        {
            get
            {
                return _postcodePrior;
            }
            set
            {
                if (_postcodePrior == value)
                    return;
                if (_postcodePrior == null || value == null || !_postcodePrior.Equals(value))
                {
                    _postcodePrior = value;
                    OnPropertyChanged(nameof(PostcodePrior));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _postcode;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("Postcode", Namespace="ESFA/ILR/2020-21")]
        public string Postcode
        {
            get
            {
                return _postcode;
            }
            set
            {
                if (_postcode == value)
                    return;
                if (_postcode == null || value == null || !_postcode.Equals(value))
                {
                    _postcode = value;
                    OnPropertyChanged(nameof(Postcode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _addLine1;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("AddLine1", Namespace="ESFA/ILR/2020-21")]
        public string AddLine1
        {
            get
            {
                return _addLine1;
            }
            set
            {
                if (_addLine1 == value)
                    return;
                if (_addLine1 == null || value == null || !_addLine1.Equals(value))
                {
                    _addLine1 = value;
                    OnPropertyChanged(nameof(AddLine1));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _addLine2;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("AddLine2", Namespace="ESFA/ILR/2020-21")]
        public string AddLine2
        {
            get
            {
                return _addLine2;
            }
            set
            {
                if (_addLine2 == value)
                    return;
                if (_addLine2 == null || value == null || !_addLine2.Equals(value))
                {
                    _addLine2 = value;
                    OnPropertyChanged(nameof(AddLine2));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _addLine3;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("AddLine3", Namespace="ESFA/ILR/2020-21")]
        public string AddLine3
        {
            get
            {
                return _addLine3;
            }
            set
            {
                if (_addLine3 == value)
                    return;
                if (_addLine3 == null || value == null || !_addLine3.Equals(value))
                {
                    _addLine3 = value;
                    OnPropertyChanged(nameof(AddLine3));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _addLine4;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("AddLine4", Namespace="ESFA/ILR/2020-21")]
        public string AddLine4
        {
            get
            {
                return _addLine4;
            }
            set
            {
                if (_addLine4 == value)
                    return;
                if (_addLine4 == null || value == null || !_addLine4.Equals(value))
                {
                    _addLine4 = value;
                    OnPropertyChanged(nameof(AddLine4));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _telNo;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("TelNo", Namespace="ESFA/ILR/2020-21")]
        public string TelNo
        {
            get
            {
                return _telNo;
            }
            set
            {
                if (_telNo == value)
                    return;
                if (_telNo == null || value == null || !_telNo.Equals(value))
                {
                    _telNo = value;
                    OnPropertyChanged(nameof(TelNo));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _email;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("Email", Namespace="ESFA/ILR/2020-21")]
        public string Email
        {
            get
            {
                return _email;
            }
            set
            {
                if (_email == value)
                    return;
                if (_email == null || value == null || !_email.Equals(value))
                {
                    _email = value;
                    OnPropertyChanged(nameof(Email));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerContactPreference> _contactPreference;
        
        [System.Xml.Serialization.XmlElementAttribute("ContactPreference", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerContactPreference> ContactPreference
        {
            get
            {
                return _contactPreference;
            }
            private set
            {
                if (_contactPreference == value)
                    return;
                if (_contactPreference == null || value == null || !_contactPreference.SequenceEqual(value))
                {
                    _contactPreference = value;
                    OnPropertyChanged(nameof(ContactPreference));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContactPreference-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ContactPreference collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactPreferenceSpecified
        {
            get
            {
                return (this.ContactPreference.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageLearner" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageLearner" /> class.</para>
        /// </summary>
        public MessageLearner()
        {
            this._contactPreference = new System.Collections.Generic.List<MessageLearnerContactPreference>();
            this._lLDDandHealthProblem = new System.Collections.Generic.List<MessageLearnerLLDDandHealthProblem>();
            this._learnerFAM = new System.Collections.Generic.List<MessageLearnerLearnerFAM>();
            this._providerSpecLearnerMonitoring = new System.Collections.Generic.List<MessageLearnerProviderSpecLearnerMonitoring>();
            this._learnerEmploymentStatus = new System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatus>();
            this._learnerHE = new System.Collections.Generic.List<MessageLearnerLearnerHE>();
            this._learningDelivery = new System.Collections.Generic.List<MessageLearnerLearningDelivery>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLLDDandHealthProblem> _lLDDandHealthProblem;
        
        [System.Xml.Serialization.XmlElementAttribute("LLDDandHealthProblem", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLLDDandHealthProblem> LLDDandHealthProblem
        {
            get
            {
                return _lLDDandHealthProblem;
            }
            private set
            {
                if (_lLDDandHealthProblem == value)
                    return;
                if (_lLDDandHealthProblem == null || value == null || !_lLDDandHealthProblem.SequenceEqual(value))
                {
                    _lLDDandHealthProblem = value;
                    OnPropertyChanged(nameof(LLDDandHealthProblem));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LLDDandHealthProblem-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LLDDandHealthProblem collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LLDDandHealthProblemSpecified
        {
            get
            {
                return (this.LLDDandHealthProblem.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearnerFAM> _learnerFAM;
        
        [System.Xml.Serialization.XmlElementAttribute("LearnerFAM", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearnerFAM> LearnerFAM
        {
            get
            {
                return _learnerFAM;
            }
            private set
            {
                if (_learnerFAM == value)
                    return;
                if (_learnerFAM == null || value == null || !_learnerFAM.SequenceEqual(value))
                {
                    _learnerFAM = value;
                    OnPropertyChanged(nameof(LearnerFAM));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnerFAM-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearnerFAM collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerFAMSpecified
        {
            get
            {
                return (this.LearnerFAM.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerProviderSpecLearnerMonitoring> _providerSpecLearnerMonitoring;
        
        [System.Xml.Serialization.XmlElementAttribute("ProviderSpecLearnerMonitoring", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerProviderSpecLearnerMonitoring> ProviderSpecLearnerMonitoring
        {
            get
            {
                return _providerSpecLearnerMonitoring;
            }
            private set
            {
                if (_providerSpecLearnerMonitoring == value)
                    return;
                if (_providerSpecLearnerMonitoring == null || value == null || !_providerSpecLearnerMonitoring.SequenceEqual(value))
                {
                    _providerSpecLearnerMonitoring = value;
                    OnPropertyChanged(nameof(ProviderSpecLearnerMonitoring));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProviderSpecLearnerMonitoring-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ProviderSpecLearnerMonitoring collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProviderSpecLearnerMonitoringSpecified
        {
            get
            {
                return (this.ProviderSpecLearnerMonitoring.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatus> _learnerEmploymentStatus;
        
        [System.Xml.Serialization.XmlElementAttribute("LearnerEmploymentStatus", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatus> LearnerEmploymentStatus
        {
            get
            {
                return _learnerEmploymentStatus;
            }
            private set
            {
                if (_learnerEmploymentStatus == value)
                    return;
                if (_learnerEmploymentStatus == null || value == null || !_learnerEmploymentStatus.SequenceEqual(value))
                {
                    _learnerEmploymentStatus = value;
                    OnPropertyChanged(nameof(LearnerEmploymentStatus));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnerEmploymentStatus-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearnerEmploymentStatus collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerEmploymentStatusSpecified
        {
            get
            {
                return (this.LearnerEmploymentStatus.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearnerHE> _learnerHE;
        
        [System.Xml.Serialization.XmlElementAttribute("LearnerHE", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearnerHE> LearnerHE
        {
            get
            {
                return _learnerHE;
            }
            private set
            {
                if (_learnerHE == value)
                    return;
                if (_learnerHE == null || value == null || !_learnerHE.SequenceEqual(value))
                {
                    _learnerHE = value;
                    OnPropertyChanged(nameof(LearnerHE));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnerHE-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearnerHE collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerHESpecified
        {
            get
            {
                return (this.LearnerHE.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDelivery> _learningDelivery;
        
        [System.Xml.Serialization.XmlElementAttribute("LearningDelivery", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDelivery> LearningDelivery
        {
            get
            {
                return _learningDelivery;
            }
            private set
            {
                if (_learningDelivery == value)
                    return;
                if (_learningDelivery == null || value == null || !_learningDelivery.SequenceEqual(value))
                {
                    _learningDelivery = value;
                    OnPropertyChanged(nameof(LearningDelivery));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearningDelivery-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearningDelivery collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearningDeliverySpecified
        {
            get
            {
                return (this.LearningDelivery.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerContactPreference", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerContactPreference : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _contPrefType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("ContPrefType", Namespace="ESFA/ILR/2020-21")]
        public string ContPrefType
        {
            get
            {
                return _contPrefType;
            }
            set
            {
                if (_contPrefType == value)
                    return;
                if (_contPrefType == null || value == null || !_contPrefType.Equals(value))
                {
                    _contPrefType = value;
                    OnPropertyChanged(nameof(ContPrefType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _contPrefCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ContPrefCode", Namespace="ESFA/ILR/2020-21")]
        public long ContPrefCodeValue
        {
            get
            {
                return _contPrefCode;
            }
            set
            {
                if (!_contPrefCode.Equals(value))
                {
                    _contPrefCode = value;
                    OnPropertyChanged(nameof(ContPrefCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ContPrefCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ContPrefCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ContPrefCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ContPrefCode
        {
            get
            {
                if (this.ContPrefCodeValueSpecified)
                {
                    return this.ContPrefCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ContPrefCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ContPrefCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ContPrefCodeValue = value.GetValueOrDefault();
                    this.ContPrefCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("ContPrefCode");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLLDDandHealthProblem", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLLDDandHealthProblem : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _lLDDCat;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LLDDCat", Namespace="ESFA/ILR/2020-21")]
        public long LLDDCatValue
        {
            get
            {
                return _lLDDCat;
            }
            set
            {
                if (!_lLDDCat.Equals(value))
                {
                    _lLDDCat = value;
                    OnPropertyChanged(nameof(LLDDCatValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LLDDCat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LLDDCat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LLDDCatValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> LLDDCat
        {
            get
            {
                if (this.LLDDCatValueSpecified)
                {
                    return this.LLDDCatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LLDDCatValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LLDDCatValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LLDDCatValue = value.GetValueOrDefault();
                    this.LLDDCatValueSpecified = value.HasValue;
                    OnPropertyChanged("LLDDCat");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _primaryLLDD;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PrimaryLLDD", Namespace="ESFA/ILR/2020-21")]
        public long PrimaryLLDDValue
        {
            get
            {
                return _primaryLLDD;
            }
            set
            {
                if (!_primaryLLDD.Equals(value))
                {
                    _primaryLLDD = value;
                    OnPropertyChanged(nameof(PrimaryLLDDValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrimaryLLDD-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrimaryLLDD property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PrimaryLLDDValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PrimaryLLDD
        {
            get
            {
                if (this.PrimaryLLDDValueSpecified)
                {
                    return this.PrimaryLLDDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PrimaryLLDDValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PrimaryLLDDValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PrimaryLLDDValue = value.GetValueOrDefault();
                    this.PrimaryLLDDValueSpecified = value.HasValue;
                    OnPropertyChanged("PrimaryLLDD");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearnerFAM", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearnerFAM : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnFAMType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("LearnFAMType", Namespace="ESFA/ILR/2020-21")]
        public string LearnFAMType
        {
            get
            {
                return _learnFAMType;
            }
            set
            {
                if (_learnFAMType == value)
                    return;
                if (_learnFAMType == null || value == null || !_learnFAMType.Equals(value))
                {
                    _learnFAMType = value;
                    OnPropertyChanged(nameof(LearnFAMType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _learnFAMCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnFAMCode", Namespace="ESFA/ILR/2020-21")]
        public long LearnFAMCodeValue
        {
            get
            {
                return _learnFAMCode;
            }
            set
            {
                if (!_learnFAMCode.Equals(value))
                {
                    _learnFAMCode = value;
                    OnPropertyChanged(nameof(LearnFAMCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnFAMCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnFAMCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnFAMCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> LearnFAMCode
        {
            get
            {
                if (this.LearnFAMCodeValueSpecified)
                {
                    return this.LearnFAMCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnFAMCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnFAMCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnFAMCodeValue = value.GetValueOrDefault();
                    this.LearnFAMCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnFAMCode");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerProviderSpecLearnerMonitoring", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerProviderSpecLearnerMonitoring : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _provSpecLearnMonOccur;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("ProvSpecLearnMonOccur", Namespace="ESFA/ILR/2020-21")]
        public string ProvSpecLearnMonOccur
        {
            get
            {
                return _provSpecLearnMonOccur;
            }
            set
            {
                if (_provSpecLearnMonOccur == value)
                    return;
                if (_provSpecLearnMonOccur == null || value == null || !_provSpecLearnMonOccur.Equals(value))
                {
                    _provSpecLearnMonOccur = value;
                    OnPropertyChanged(nameof(ProvSpecLearnMonOccur));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _provSpecLearnMon;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("ProvSpecLearnMon", Namespace="ESFA/ILR/2020-21")]
        public string ProvSpecLearnMon
        {
            get
            {
                return _provSpecLearnMon;
            }
            set
            {
                if (_provSpecLearnMon == value)
                    return;
                if (_provSpecLearnMon == null || value == null || !_provSpecLearnMon.Equals(value))
                {
                    _provSpecLearnMon = value;
                    OnPropertyChanged(nameof(ProvSpecLearnMon));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearnerEmploymentStatus", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearnerEmploymentStatus : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _empStat;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("EmpStat", Namespace="ESFA/ILR/2020-21")]
        public long EmpStatValue
        {
            get
            {
                return _empStat;
            }
            set
            {
                if (!_empStat.Equals(value))
                {
                    _empStat = value;
                    OnPropertyChanged(nameof(EmpStatValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmpStat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmpStat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmpStatValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> EmpStat
        {
            get
            {
                if (this.EmpStatValueSpecified)
                {
                    return this.EmpStatValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.EmpStatValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.EmpStatValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.EmpStatValue = value.GetValueOrDefault();
                    this.EmpStatValueSpecified = value.HasValue;
                    OnPropertyChanged("EmpStat");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _dateEmpStatApp;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("DateEmpStatApp", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime DateEmpStatAppValue
        {
            get
            {
                return _dateEmpStatApp;
            }
            set
            {
                if (!_dateEmpStatApp.Equals(value))
                {
                    _dateEmpStatApp = value;
                    OnPropertyChanged(nameof(DateEmpStatAppValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DateEmpStatApp-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DateEmpStatApp property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DateEmpStatAppValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> DateEmpStatApp
        {
            get
            {
                if (this.DateEmpStatAppValueSpecified)
                {
                    return this.DateEmpStatAppValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.DateEmpStatAppValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.DateEmpStatAppValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.DateEmpStatAppValue = value.GetValueOrDefault();
                    this.DateEmpStatAppValueSpecified = value.HasValue;
                    OnPropertyChanged("DateEmpStatApp");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _empId;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("EmpId", Namespace="ESFA/ILR/2020-21")]
        public long EmpIdValue
        {
            get
            {
                return _empId;
            }
            set
            {
                if (!_empId.Equals(value))
                {
                    _empId = value;
                    OnPropertyChanged(nameof(EmpIdValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmpId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmpId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmpIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> EmpId
        {
            get
            {
                if (this.EmpIdValueSpecified)
                {
                    return this.EmpIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.EmpIdValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.EmpIdValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.EmpIdValue = value.GetValueOrDefault();
                    this.EmpIdValueSpecified = value.HasValue;
                    OnPropertyChanged("EmpId");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatusEmploymentStatusMonitoring> _employmentStatusMonitoring;
        
        [System.Xml.Serialization.XmlElementAttribute("EmploymentStatusMonitoring", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatusEmploymentStatusMonitoring> EmploymentStatusMonitoring
        {
            get
            {
                return _employmentStatusMonitoring;
            }
            private set
            {
                if (_employmentStatusMonitoring == value)
                    return;
                if (_employmentStatusMonitoring == null || value == null || !_employmentStatusMonitoring.SequenceEqual(value))
                {
                    _employmentStatusMonitoring = value;
                    OnPropertyChanged(nameof(EmploymentStatusMonitoring));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmploymentStatusMonitoring-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EmploymentStatusMonitoring collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EmploymentStatusMonitoringSpecified
        {
            get
            {
                return (this.EmploymentStatusMonitoring.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageLearnerLearnerEmploymentStatus" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageLearnerLearnerEmploymentStatus" /> class.</para>
        /// </summary>
        public MessageLearnerLearnerEmploymentStatus()
        {
            this._employmentStatusMonitoring = new System.Collections.Generic.List<MessageLearnerLearnerEmploymentStatusEmploymentStatusMonitoring>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearnerEmploymentStatusEmploymentStatusMonitoring", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearnerEmploymentStatusEmploymentStatusMonitoring : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _eSMType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("ESMType", Namespace="ESFA/ILR/2020-21")]
        public string ESMType
        {
            get
            {
                return _eSMType;
            }
            set
            {
                if (_eSMType == value)
                    return;
                if (_eSMType == null || value == null || !_eSMType.Equals(value))
                {
                    _eSMType = value;
                    OnPropertyChanged(nameof(ESMType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _eSMCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ESMCode", Namespace="ESFA/ILR/2020-21")]
        public long ESMCodeValue
        {
            get
            {
                return _eSMCode;
            }
            set
            {
                if (!_eSMCode.Equals(value))
                {
                    _eSMCode = value;
                    OnPropertyChanged(nameof(ESMCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ESMCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ESMCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ESMCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ESMCode
        {
            get
            {
                if (this.ESMCodeValueSpecified)
                {
                    return this.ESMCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ESMCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ESMCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ESMCodeValue = value.GetValueOrDefault();
                    this.ESMCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("ESMCode");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearnerHE", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearnerHE : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _uCASPERID;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("UCASPERID", Namespace="ESFA/ILR/2020-21")]
        public string UCASPERID
        {
            get
            {
                return _uCASPERID;
            }
            set
            {
                if (_uCASPERID == value)
                    return;
                if (_uCASPERID == null || value == null || !_uCASPERID.Equals(value))
                {
                    _uCASPERID = value;
                    OnPropertyChanged(nameof(UCASPERID));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _tTACCOM;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("TTACCOM", Namespace="ESFA/ILR/2020-21")]
        public long TTACCOMValue
        {
            get
            {
                return _tTACCOM;
            }
            set
            {
                if (!_tTACCOM.Equals(value))
                {
                    _tTACCOM = value;
                    OnPropertyChanged(nameof(TTACCOMValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TTACCOM-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TTACCOM property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TTACCOMValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> TTACCOM
        {
            get
            {
                if (this.TTACCOMValueSpecified)
                {
                    return this.TTACCOMValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.TTACCOMValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.TTACCOMValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.TTACCOMValue = value.GetValueOrDefault();
                    this.TTACCOMValueSpecified = value.HasValue;
                    OnPropertyChanged("TTACCOM");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearnerHELearnerHEFinancialSupport> _learnerHEFinancialSupport;
        
        [System.Xml.Serialization.XmlElementAttribute("LearnerHEFinancialSupport", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearnerHELearnerHEFinancialSupport> LearnerHEFinancialSupport
        {
            get
            {
                return _learnerHEFinancialSupport;
            }
            private set
            {
                if (_learnerHEFinancialSupport == value)
                    return;
                if (_learnerHEFinancialSupport == null || value == null || !_learnerHEFinancialSupport.SequenceEqual(value))
                {
                    _learnerHEFinancialSupport = value;
                    OnPropertyChanged(nameof(LearnerHEFinancialSupport));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnerHEFinancialSupport-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearnerHEFinancialSupport collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearnerHEFinancialSupportSpecified
        {
            get
            {
                return (this.LearnerHEFinancialSupport.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageLearnerLearnerHE" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageLearnerLearnerHE" /> class.</para>
        /// </summary>
        public MessageLearnerLearnerHE()
        {
            this._learnerHEFinancialSupport = new System.Collections.Generic.List<MessageLearnerLearnerHELearnerHEFinancialSupport>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearnerHELearnerHEFinancialSupport", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearnerHELearnerHEFinancialSupport : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fINTYPE;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FINTYPE", Namespace="ESFA/ILR/2020-21")]
        public long FINTYPEValue
        {
            get
            {
                return _fINTYPE;
            }
            set
            {
                if (!_fINTYPE.Equals(value))
                {
                    _fINTYPE = value;
                    OnPropertyChanged(nameof(FINTYPEValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FINTYPE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FINTYPE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FINTYPEValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FINTYPE
        {
            get
            {
                if (this.FINTYPEValueSpecified)
                {
                    return this.FINTYPEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FINTYPEValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FINTYPEValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FINTYPEValue = value.GetValueOrDefault();
                    this.FINTYPEValueSpecified = value.HasValue;
                    OnPropertyChanged("FINTYPE");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fINAMOUNT;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FINAMOUNT", Namespace="ESFA/ILR/2020-21")]
        public long FINAMOUNTValue
        {
            get
            {
                return _fINAMOUNT;
            }
            set
            {
                if (!_fINAMOUNT.Equals(value))
                {
                    _fINAMOUNT = value;
                    OnPropertyChanged(nameof(FINAMOUNTValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FINAMOUNT-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FINAMOUNT property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FINAMOUNTValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FINAMOUNT
        {
            get
            {
                if (this.FINAMOUNTValueSpecified)
                {
                    return this.FINAMOUNTValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FINAMOUNTValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FINAMOUNTValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FINAMOUNTValue = value.GetValueOrDefault();
                    this.FINAMOUNTValueSpecified = value.HasValue;
                    OnPropertyChanged("FINAMOUNT");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDelivery", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDelivery : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnAimRef;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("LearnAimRef", Namespace="ESFA/ILR/2020-21")]
        public string LearnAimRef
        {
            get
            {
                return _learnAimRef;
            }
            set
            {
                if (_learnAimRef == value)
                    return;
                if (_learnAimRef == null || value == null || !_learnAimRef.Equals(value))
                {
                    _learnAimRef = value;
                    OnPropertyChanged(nameof(LearnAimRef));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _aimType;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AimType", Namespace="ESFA/ILR/2020-21")]
        public long AimTypeValue
        {
            get
            {
                return _aimType;
            }
            set
            {
                if (!_aimType.Equals(value))
                {
                    _aimType = value;
                    OnPropertyChanged(nameof(AimTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AimType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AimType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AimTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> AimType
        {
            get
            {
                if (this.AimTypeValueSpecified)
                {
                    return this.AimTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AimTypeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AimTypeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AimTypeValue = value.GetValueOrDefault();
                    this.AimTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("AimType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _aimSeqNumber;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AimSeqNumber", Namespace="ESFA/ILR/2020-21")]
        public long AimSeqNumberValue
        {
            get
            {
                return _aimSeqNumber;
            }
            set
            {
                if (!_aimSeqNumber.Equals(value))
                {
                    _aimSeqNumber = value;
                    OnPropertyChanged(nameof(AimSeqNumberValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AimSeqNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AimSeqNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AimSeqNumberValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> AimSeqNumber
        {
            get
            {
                if (this.AimSeqNumberValueSpecified)
                {
                    return this.AimSeqNumberValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AimSeqNumberValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AimSeqNumberValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AimSeqNumberValue = value.GetValueOrDefault();
                    this.AimSeqNumberValueSpecified = value.HasValue;
                    OnPropertyChanged("AimSeqNumber");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _learnStartDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnStartDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime LearnStartDateValue
        {
            get
            {
                return _learnStartDate;
            }
            set
            {
                if (!_learnStartDate.Equals(value))
                {
                    _learnStartDate = value;
                    OnPropertyChanged(nameof(LearnStartDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnStartDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnStartDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnStartDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LearnStartDate
        {
            get
            {
                if (this.LearnStartDateValueSpecified)
                {
                    return this.LearnStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnStartDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnStartDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnStartDateValue = value.GetValueOrDefault();
                    this.LearnStartDateValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnStartDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _origLearnStartDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OrigLearnStartDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime OrigLearnStartDateValue
        {
            get
            {
                return _origLearnStartDate;
            }
            set
            {
                if (!_origLearnStartDate.Equals(value))
                {
                    _origLearnStartDate = value;
                    OnPropertyChanged(nameof(OrigLearnStartDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OrigLearnStartDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OrigLearnStartDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OrigLearnStartDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> OrigLearnStartDate
        {
            get
            {
                if (this.OrigLearnStartDateValueSpecified)
                {
                    return this.OrigLearnStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OrigLearnStartDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OrigLearnStartDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OrigLearnStartDateValue = value.GetValueOrDefault();
                    this.OrigLearnStartDateValueSpecified = value.HasValue;
                    OnPropertyChanged("OrigLearnStartDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _learnPlanEndDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnPlanEndDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime LearnPlanEndDateValue
        {
            get
            {
                return _learnPlanEndDate;
            }
            set
            {
                if (!_learnPlanEndDate.Equals(value))
                {
                    _learnPlanEndDate = value;
                    OnPropertyChanged(nameof(LearnPlanEndDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnPlanEndDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnPlanEndDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnPlanEndDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LearnPlanEndDate
        {
            get
            {
                if (this.LearnPlanEndDateValueSpecified)
                {
                    return this.LearnPlanEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnPlanEndDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnPlanEndDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnPlanEndDateValue = value.GetValueOrDefault();
                    this.LearnPlanEndDateValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnPlanEndDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fundModel;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FundModel", Namespace="ESFA/ILR/2020-21")]
        public long FundModelValue
        {
            get
            {
                return _fundModel;
            }
            set
            {
                if (!_fundModel.Equals(value))
                {
                    _fundModel = value;
                    OnPropertyChanged(nameof(FundModelValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FundModel-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FundModel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FundModelValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FundModel
        {
            get
            {
                if (this.FundModelValueSpecified)
                {
                    return this.FundModelValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FundModelValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FundModelValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FundModelValue = value.GetValueOrDefault();
                    this.FundModelValueSpecified = value.HasValue;
                    OnPropertyChanged("FundModel");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _pHours;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PHours", Namespace="ESFA/ILR/2020-21")]
        public long PHoursValue
        {
            get
            {
                return _pHours;
            }
            set
            {
                if (!_pHours.Equals(value))
                {
                    _pHours = value;
                    OnPropertyChanged(nameof(PHoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PHours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PHours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PHoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PHours
        {
            get
            {
                if (this.PHoursValueSpecified)
                {
                    return this.PHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PHoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PHoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PHoursValue = value.GetValueOrDefault();
                    this.PHoursValueSpecified = value.HasValue;
                    OnPropertyChanged("PHours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private int _oTJActhours;
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(int), "0", "9999")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OTJActhours", Namespace="ESFA/ILR/2020-21")]
        public int OTJActhoursValue
        {
            get
            {
                return _oTJActhours;
            }
            set
            {
                if (!_oTJActhours.Equals(value))
                {
                    _oTJActhours = value;
                    OnPropertyChanged(nameof(OTJActhoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OTJActhours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OTJActhours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OTJActhoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<int> OTJActhours
        {
            get
            {
                if (this.OTJActhoursValueSpecified)
                {
                    return this.OTJActhoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OTJActhoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OTJActhoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OTJActhoursValue = value.GetValueOrDefault();
                    this.OTJActhoursValueSpecified = value.HasValue;
                    OnPropertyChanged("OTJActhours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _progType;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ProgType", Namespace="ESFA/ILR/2020-21")]
        public long ProgTypeValue
        {
            get
            {
                return _progType;
            }
            set
            {
                if (!_progType.Equals(value))
                {
                    _progType = value;
                    OnPropertyChanged(nameof(ProgTypeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProgType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProgType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ProgTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ProgType
        {
            get
            {
                if (this.ProgTypeValueSpecified)
                {
                    return this.ProgTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ProgTypeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ProgTypeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ProgTypeValue = value.GetValueOrDefault();
                    this.ProgTypeValueSpecified = value.HasValue;
                    OnPropertyChanged("ProgType");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fworkCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FworkCode", Namespace="ESFA/ILR/2020-21")]
        public long FworkCodeValue
        {
            get
            {
                return _fworkCode;
            }
            set
            {
                if (!_fworkCode.Equals(value))
                {
                    _fworkCode = value;
                    OnPropertyChanged(nameof(FworkCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FworkCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FworkCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FworkCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FworkCode
        {
            get
            {
                if (this.FworkCodeValueSpecified)
                {
                    return this.FworkCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FworkCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FworkCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FworkCodeValue = value.GetValueOrDefault();
                    this.FworkCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("FworkCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _pwayCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PwayCode", Namespace="ESFA/ILR/2020-21")]
        public long PwayCodeValue
        {
            get
            {
                return _pwayCode;
            }
            set
            {
                if (!_pwayCode.Equals(value))
                {
                    _pwayCode = value;
                    OnPropertyChanged(nameof(PwayCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PwayCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PwayCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PwayCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PwayCode
        {
            get
            {
                if (this.PwayCodeValueSpecified)
                {
                    return this.PwayCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PwayCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PwayCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PwayCodeValue = value.GetValueOrDefault();
                    this.PwayCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("PwayCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _stdCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("StdCode", Namespace="ESFA/ILR/2020-21")]
        public long StdCodeValue
        {
            get
            {
                return _stdCode;
            }
            set
            {
                if (!_stdCode.Equals(value))
                {
                    _stdCode = value;
                    OnPropertyChanged(nameof(StdCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StdCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StdCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool StdCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> StdCode
        {
            get
            {
                if (this.StdCodeValueSpecified)
                {
                    return this.StdCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.StdCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.StdCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.StdCodeValue = value.GetValueOrDefault();
                    this.StdCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("StdCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _partnerUKPRN;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PartnerUKPRN", Namespace="ESFA/ILR/2020-21")]
        public long PartnerUKPRNValue
        {
            get
            {
                return _partnerUKPRN;
            }
            set
            {
                if (!_partnerUKPRN.Equals(value))
                {
                    _partnerUKPRN = value;
                    OnPropertyChanged(nameof(PartnerUKPRNValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PartnerUKPRN-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PartnerUKPRN property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PartnerUKPRNValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PartnerUKPRN
        {
            get
            {
                if (this.PartnerUKPRNValueSpecified)
                {
                    return this.PartnerUKPRNValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PartnerUKPRNValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PartnerUKPRNValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PartnerUKPRNValue = value.GetValueOrDefault();
                    this.PartnerUKPRNValueSpecified = value.HasValue;
                    OnPropertyChanged("PartnerUKPRN");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _delLocPostCode;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("DelLocPostCode", Namespace="ESFA/ILR/2020-21")]
        public string DelLocPostCode
        {
            get
            {
                return _delLocPostCode;
            }
            set
            {
                if (_delLocPostCode == value)
                    return;
                if (_delLocPostCode == null || value == null || !_delLocPostCode.Equals(value))
                {
                    _delLocPostCode = value;
                    OnPropertyChanged(nameof(DelLocPostCode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _lSDPostcode;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("LSDPostcode", Namespace="ESFA/ILR/2020-21")]
        public string LSDPostcode
        {
            get
            {
                return _lSDPostcode;
            }
            set
            {
                if (_lSDPostcode == value)
                    return;
                if (_lSDPostcode == null || value == null || !_lSDPostcode.Equals(value))
                {
                    _lSDPostcode = value;
                    OnPropertyChanged(nameof(LSDPostcode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _addHours;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AddHours", Namespace="ESFA/ILR/2020-21")]
        public long AddHoursValue
        {
            get
            {
                return _addHours;
            }
            set
            {
                if (!_addHours.Equals(value))
                {
                    _addHours = value;
                    OnPropertyChanged(nameof(AddHoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AddHours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AddHours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AddHoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> AddHours
        {
            get
            {
                if (this.AddHoursValueSpecified)
                {
                    return this.AddHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AddHoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AddHoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AddHoursValue = value.GetValueOrDefault();
                    this.AddHoursValueSpecified = value.HasValue;
                    OnPropertyChanged("AddHours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _priorLearnFundAdj;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PriorLearnFundAdj", Namespace="ESFA/ILR/2020-21")]
        public long PriorLearnFundAdjValue
        {
            get
            {
                return _priorLearnFundAdj;
            }
            set
            {
                if (!_priorLearnFundAdj.Equals(value))
                {
                    _priorLearnFundAdj = value;
                    OnPropertyChanged(nameof(PriorLearnFundAdjValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PriorLearnFundAdj-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PriorLearnFundAdj property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PriorLearnFundAdjValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> PriorLearnFundAdj
        {
            get
            {
                if (this.PriorLearnFundAdjValueSpecified)
                {
                    return this.PriorLearnFundAdjValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PriorLearnFundAdjValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PriorLearnFundAdjValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PriorLearnFundAdjValue = value.GetValueOrDefault();
                    this.PriorLearnFundAdjValueSpecified = value.HasValue;
                    OnPropertyChanged("PriorLearnFundAdj");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _otherFundAdj;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OtherFundAdj", Namespace="ESFA/ILR/2020-21")]
        public long OtherFundAdjValue
        {
            get
            {
                return _otherFundAdj;
            }
            set
            {
                if (!_otherFundAdj.Equals(value))
                {
                    _otherFundAdj = value;
                    OnPropertyChanged(nameof(OtherFundAdjValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherFundAdj-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OtherFundAdj property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OtherFundAdjValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> OtherFundAdj
        {
            get
            {
                if (this.OtherFundAdjValueSpecified)
                {
                    return this.OtherFundAdjValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OtherFundAdjValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OtherFundAdjValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OtherFundAdjValue = value.GetValueOrDefault();
                    this.OtherFundAdjValueSpecified = value.HasValue;
                    OnPropertyChanged("OtherFundAdj");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _conRefNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("ConRefNumber", Namespace="ESFA/ILR/2020-21")]
        public string ConRefNumber
        {
            get
            {
                return _conRefNumber;
            }
            set
            {
                if (_conRefNumber == value)
                    return;
                if (_conRefNumber == null || value == null || !_conRefNumber.Equals(value))
                {
                    _conRefNumber = value;
                    OnPropertyChanged(nameof(ConRefNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _ePAOrgID;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("EPAOrgID", Namespace="ESFA/ILR/2020-21")]
        public string EPAOrgID
        {
            get
            {
                return _ePAOrgID;
            }
            set
            {
                if (_ePAOrgID == value)
                    return;
                if (_ePAOrgID == null || value == null || !_ePAOrgID.Equals(value))
                {
                    _ePAOrgID = value;
                    OnPropertyChanged(nameof(EPAOrgID));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _empOutcome;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("EmpOutcome", Namespace="ESFA/ILR/2020-21")]
        public long EmpOutcomeValue
        {
            get
            {
                return _empOutcome;
            }
            set
            {
                if (!_empOutcome.Equals(value))
                {
                    _empOutcome = value;
                    OnPropertyChanged(nameof(EmpOutcomeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmpOutcome-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmpOutcome property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmpOutcomeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> EmpOutcome
        {
            get
            {
                if (this.EmpOutcomeValueSpecified)
                {
                    return this.EmpOutcomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.EmpOutcomeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.EmpOutcomeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.EmpOutcomeValue = value.GetValueOrDefault();
                    this.EmpOutcomeValueSpecified = value.HasValue;
                    OnPropertyChanged("EmpOutcome");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _compStatus;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("CompStatus", Namespace="ESFA/ILR/2020-21")]
        public long CompStatusValue
        {
            get
            {
                return _compStatus;
            }
            set
            {
                if (!_compStatus.Equals(value))
                {
                    _compStatus = value;
                    OnPropertyChanged(nameof(CompStatusValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CompStatus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CompStatus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool CompStatusValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> CompStatus
        {
            get
            {
                if (this.CompStatusValueSpecified)
                {
                    return this.CompStatusValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.CompStatusValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.CompStatusValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.CompStatusValue = value.GetValueOrDefault();
                    this.CompStatusValueSpecified = value.HasValue;
                    OnPropertyChanged("CompStatus");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _learnActEndDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnActEndDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime LearnActEndDateValue
        {
            get
            {
                return _learnActEndDate;
            }
            set
            {
                if (!_learnActEndDate.Equals(value))
                {
                    _learnActEndDate = value;
                    OnPropertyChanged(nameof(LearnActEndDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnActEndDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnActEndDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnActEndDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LearnActEndDate
        {
            get
            {
                if (this.LearnActEndDateValueSpecified)
                {
                    return this.LearnActEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnActEndDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnActEndDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnActEndDateValue = value.GetValueOrDefault();
                    this.LearnActEndDateValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnActEndDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _withdrawReason;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WithdrawReason", Namespace="ESFA/ILR/2020-21")]
        public long WithdrawReasonValue
        {
            get
            {
                return _withdrawReason;
            }
            set
            {
                if (!_withdrawReason.Equals(value))
                {
                    _withdrawReason = value;
                    OnPropertyChanged(nameof(WithdrawReasonValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WithdrawReason-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WithdrawReason property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WithdrawReasonValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> WithdrawReason
        {
            get
            {
                if (this.WithdrawReasonValueSpecified)
                {
                    return this.WithdrawReasonValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WithdrawReasonValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WithdrawReasonValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WithdrawReasonValue = value.GetValueOrDefault();
                    this.WithdrawReasonValueSpecified = value.HasValue;
                    OnPropertyChanged("WithdrawReason");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _outcome;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("Outcome", Namespace="ESFA/ILR/2020-21")]
        public long OutcomeValue
        {
            get
            {
                return _outcome;
            }
            set
            {
                if (!_outcome.Equals(value))
                {
                    _outcome = value;
                    OnPropertyChanged(nameof(OutcomeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Outcome-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Outcome property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OutcomeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> Outcome
        {
            get
            {
                if (this.OutcomeValueSpecified)
                {
                    return this.OutcomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OutcomeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OutcomeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OutcomeValue = value.GetValueOrDefault();
                    this.OutcomeValueSpecified = value.HasValue;
                    OnPropertyChanged("Outcome");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _achDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AchDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime AchDateValue
        {
            get
            {
                return _achDate;
            }
            set
            {
                if (!_achDate.Equals(value))
                {
                    _achDate = value;
                    OnPropertyChanged(nameof(AchDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AchDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AchDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AchDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> AchDate
        {
            get
            {
                if (this.AchDateValueSpecified)
                {
                    return this.AchDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AchDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AchDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AchDateValue = value.GetValueOrDefault();
                    this.AchDateValueSpecified = value.HasValue;
                    OnPropertyChanged("AchDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _outGrade;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("OutGrade", Namespace="ESFA/ILR/2020-21")]
        public string OutGrade
        {
            get
            {
                return _outGrade;
            }
            set
            {
                if (_outGrade == value)
                    return;
                if (_outGrade == null || value == null || !_outGrade.Equals(value))
                {
                    _outGrade = value;
                    OnPropertyChanged(nameof(OutGrade));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _sWSupAimId;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("SWSupAimId", Namespace="ESFA/ILR/2020-21")]
        public string SWSupAimId
        {
            get
            {
                return _sWSupAimId;
            }
            set
            {
                if (_sWSupAimId == value)
                    return;
                if (_sWSupAimId == null || value == null || !_sWSupAimId.Equals(value))
                {
                    _sWSupAimId = value;
                    OnPropertyChanged(nameof(SWSupAimId));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryFAM> _learningDeliveryFAM;
        
        [System.Xml.Serialization.XmlElementAttribute("LearningDeliveryFAM", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryFAM> LearningDeliveryFAM
        {
            get
            {
                return _learningDeliveryFAM;
            }
            private set
            {
                if (_learningDeliveryFAM == value)
                    return;
                if (_learningDeliveryFAM == null || value == null || !_learningDeliveryFAM.SequenceEqual(value))
                {
                    _learningDeliveryFAM = value;
                    OnPropertyChanged(nameof(LearningDeliveryFAM));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearningDeliveryFAM-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearningDeliveryFAM collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearningDeliveryFAMSpecified
        {
            get
            {
                return (this.LearningDeliveryFAM.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageLearnerLearningDelivery" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageLearnerLearningDelivery" /> class.</para>
        /// </summary>
        public MessageLearnerLearningDelivery()
        {
            this._learningDeliveryFAM = new System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryFAM>();
            this._learningDeliveryWorkPlacement = new System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryWorkPlacement>();
            this._appFinRecord = new System.Collections.Generic.List<MessageLearnerLearningDeliveryAppFinRecord>();
            this._providerSpecDeliveryMonitoring = new System.Collections.Generic.List<MessageLearnerLearningDeliveryProviderSpecDeliveryMonitoring>();
            this._learningDeliveryHE = new System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryHE>();
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryWorkPlacement> _learningDeliveryWorkPlacement;
        
        [System.Xml.Serialization.XmlElementAttribute("LearningDeliveryWorkPlacement", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryWorkPlacement> LearningDeliveryWorkPlacement
        {
            get
            {
                return _learningDeliveryWorkPlacement;
            }
            private set
            {
                if (_learningDeliveryWorkPlacement == value)
                    return;
                if (_learningDeliveryWorkPlacement == null || value == null || !_learningDeliveryWorkPlacement.SequenceEqual(value))
                {
                    _learningDeliveryWorkPlacement = value;
                    OnPropertyChanged(nameof(LearningDeliveryWorkPlacement));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearningDeliveryWorkPlacement-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearningDeliveryWorkPlacement collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearningDeliveryWorkPlacementSpecified
        {
            get
            {
                return (this.LearningDeliveryWorkPlacement.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDeliveryAppFinRecord> _appFinRecord;
        
        [System.Xml.Serialization.XmlElementAttribute("AppFinRecord", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDeliveryAppFinRecord> AppFinRecord
        {
            get
            {
                return _appFinRecord;
            }
            private set
            {
                if (_appFinRecord == value)
                    return;
                if (_appFinRecord == null || value == null || !_appFinRecord.SequenceEqual(value))
                {
                    _appFinRecord = value;
                    OnPropertyChanged(nameof(AppFinRecord));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AppFinRecord-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AppFinRecord collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AppFinRecordSpecified
        {
            get
            {
                return (this.AppFinRecord.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDeliveryProviderSpecDeliveryMonitoring> _providerSpecDeliveryMonitoring;
        
        [System.Xml.Serialization.XmlElementAttribute("ProviderSpecDeliveryMonitoring", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDeliveryProviderSpecDeliveryMonitoring> ProviderSpecDeliveryMonitoring
        {
            get
            {
                return _providerSpecDeliveryMonitoring;
            }
            private set
            {
                if (_providerSpecDeliveryMonitoring == value)
                    return;
                if (_providerSpecDeliveryMonitoring == null || value == null || !_providerSpecDeliveryMonitoring.SequenceEqual(value))
                {
                    _providerSpecDeliveryMonitoring = value;
                    OnPropertyChanged(nameof(ProviderSpecDeliveryMonitoring));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ProviderSpecDeliveryMonitoring-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ProviderSpecDeliveryMonitoring collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProviderSpecDeliveryMonitoringSpecified
        {
            get
            {
                return (this.ProviderSpecDeliveryMonitoring.Count != 0);
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryHE> _learningDeliveryHE;
        
        [System.Xml.Serialization.XmlElementAttribute("LearningDeliveryHE", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerLearningDeliveryLearningDeliveryHE> LearningDeliveryHE
        {
            get
            {
                return _learningDeliveryHE;
            }
            private set
            {
                if (_learningDeliveryHE == value)
                    return;
                if (_learningDeliveryHE == null || value == null || !_learningDeliveryHE.SequenceEqual(value))
                {
                    _learningDeliveryHE = value;
                    OnPropertyChanged(nameof(LearningDeliveryHE));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearningDeliveryHE-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LearningDeliveryHE collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LearningDeliveryHESpecified
        {
            get
            {
                return (this.LearningDeliveryHE.Count != 0);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDeliveryLearningDeliveryFAM", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDeliveryLearningDeliveryFAM : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnDelFAMType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("LearnDelFAMType", Namespace="ESFA/ILR/2020-21")]
        public string LearnDelFAMType
        {
            get
            {
                return _learnDelFAMType;
            }
            set
            {
                if (_learnDelFAMType == value)
                    return;
                if (_learnDelFAMType == null || value == null || !_learnDelFAMType.Equals(value))
                {
                    _learnDelFAMType = value;
                    OnPropertyChanged(nameof(LearnDelFAMType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnDelFAMCode;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("LearnDelFAMCode", Namespace="ESFA/ILR/2020-21")]
        public string LearnDelFAMCode
        {
            get
            {
                return _learnDelFAMCode;
            }
            set
            {
                if (_learnDelFAMCode == value)
                    return;
                if (_learnDelFAMCode == null || value == null || !_learnDelFAMCode.Equals(value))
                {
                    _learnDelFAMCode = value;
                    OnPropertyChanged(nameof(LearnDelFAMCode));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _learnDelFAMDateFrom;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnDelFAMDateFrom", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime LearnDelFAMDateFromValue
        {
            get
            {
                return _learnDelFAMDateFrom;
            }
            set
            {
                if (!_learnDelFAMDateFrom.Equals(value))
                {
                    _learnDelFAMDateFrom = value;
                    OnPropertyChanged(nameof(LearnDelFAMDateFromValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnDelFAMDateFrom-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnDelFAMDateFrom property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnDelFAMDateFromValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LearnDelFAMDateFrom
        {
            get
            {
                if (this.LearnDelFAMDateFromValueSpecified)
                {
                    return this.LearnDelFAMDateFromValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnDelFAMDateFromValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnDelFAMDateFromValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnDelFAMDateFromValue = value.GetValueOrDefault();
                    this.LearnDelFAMDateFromValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnDelFAMDateFrom");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _learnDelFAMDateTo;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("LearnDelFAMDateTo", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime LearnDelFAMDateToValue
        {
            get
            {
                return _learnDelFAMDateTo;
            }
            set
            {
                if (!_learnDelFAMDateTo.Equals(value))
                {
                    _learnDelFAMDateTo = value;
                    OnPropertyChanged(nameof(LearnDelFAMDateToValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LearnDelFAMDateTo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LearnDelFAMDateTo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LearnDelFAMDateToValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> LearnDelFAMDateTo
        {
            get
            {
                if (this.LearnDelFAMDateToValueSpecified)
                {
                    return this.LearnDelFAMDateToValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.LearnDelFAMDateToValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.LearnDelFAMDateToValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.LearnDelFAMDateToValue = value.GetValueOrDefault();
                    this.LearnDelFAMDateToValueSpecified = value.HasValue;
                    OnPropertyChanged("LearnDelFAMDateTo");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDeliveryLearningDeliveryWorkPlacement", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDeliveryLearningDeliveryWorkPlacement : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _workPlaceStartDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WorkPlaceStartDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime WorkPlaceStartDateValue
        {
            get
            {
                return _workPlaceStartDate;
            }
            set
            {
                if (!_workPlaceStartDate.Equals(value))
                {
                    _workPlaceStartDate = value;
                    OnPropertyChanged(nameof(WorkPlaceStartDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WorkPlaceStartDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WorkPlaceStartDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WorkPlaceStartDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> WorkPlaceStartDate
        {
            get
            {
                if (this.WorkPlaceStartDateValueSpecified)
                {
                    return this.WorkPlaceStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WorkPlaceStartDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WorkPlaceStartDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WorkPlaceStartDateValue = value.GetValueOrDefault();
                    this.WorkPlaceStartDateValueSpecified = value.HasValue;
                    OnPropertyChanged("WorkPlaceStartDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _workPlaceEndDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WorkPlaceEndDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime WorkPlaceEndDateValue
        {
            get
            {
                return _workPlaceEndDate;
            }
            set
            {
                if (!_workPlaceEndDate.Equals(value))
                {
                    _workPlaceEndDate = value;
                    OnPropertyChanged(nameof(WorkPlaceEndDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WorkPlaceEndDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WorkPlaceEndDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WorkPlaceEndDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> WorkPlaceEndDate
        {
            get
            {
                if (this.WorkPlaceEndDateValueSpecified)
                {
                    return this.WorkPlaceEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WorkPlaceEndDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WorkPlaceEndDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WorkPlaceEndDateValue = value.GetValueOrDefault();
                    this.WorkPlaceEndDateValueSpecified = value.HasValue;
                    OnPropertyChanged("WorkPlaceEndDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _workPlaceHours;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WorkPlaceHours", Namespace="ESFA/ILR/2020-21")]
        public long WorkPlaceHoursValue
        {
            get
            {
                return _workPlaceHours;
            }
            set
            {
                if (!_workPlaceHours.Equals(value))
                {
                    _workPlaceHours = value;
                    OnPropertyChanged(nameof(WorkPlaceHoursValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WorkPlaceHours-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WorkPlaceHours property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WorkPlaceHoursValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> WorkPlaceHours
        {
            get
            {
                if (this.WorkPlaceHoursValueSpecified)
                {
                    return this.WorkPlaceHoursValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WorkPlaceHoursValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WorkPlaceHoursValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WorkPlaceHoursValue = value.GetValueOrDefault();
                    this.WorkPlaceHoursValueSpecified = value.HasValue;
                    OnPropertyChanged("WorkPlaceHours");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _workPlaceMode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WorkPlaceMode", Namespace="ESFA/ILR/2020-21")]
        public long WorkPlaceModeValue
        {
            get
            {
                return _workPlaceMode;
            }
            set
            {
                if (!_workPlaceMode.Equals(value))
                {
                    _workPlaceMode = value;
                    OnPropertyChanged(nameof(WorkPlaceModeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WorkPlaceMode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WorkPlaceMode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WorkPlaceModeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> WorkPlaceMode
        {
            get
            {
                if (this.WorkPlaceModeValueSpecified)
                {
                    return this.WorkPlaceModeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WorkPlaceModeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WorkPlaceModeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WorkPlaceModeValue = value.GetValueOrDefault();
                    this.WorkPlaceModeValueSpecified = value.HasValue;
                    OnPropertyChanged("WorkPlaceMode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _workPlaceEmpId;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("WorkPlaceEmpId", Namespace="ESFA/ILR/2020-21")]
        public long WorkPlaceEmpIdValue
        {
            get
            {
                return _workPlaceEmpId;
            }
            set
            {
                if (!_workPlaceEmpId.Equals(value))
                {
                    _workPlaceEmpId = value;
                    OnPropertyChanged(nameof(WorkPlaceEmpIdValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WorkPlaceEmpId-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WorkPlaceEmpId property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WorkPlaceEmpIdValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> WorkPlaceEmpId
        {
            get
            {
                if (this.WorkPlaceEmpIdValueSpecified)
                {
                    return this.WorkPlaceEmpIdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.WorkPlaceEmpIdValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.WorkPlaceEmpIdValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.WorkPlaceEmpIdValue = value.GetValueOrDefault();
                    this.WorkPlaceEmpIdValueSpecified = value.HasValue;
                    OnPropertyChanged("WorkPlaceEmpId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDeliveryAppFinRecord", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDeliveryAppFinRecord : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _aFinType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("AFinType", Namespace="ESFA/ILR/2020-21")]
        public string AFinType
        {
            get
            {
                return _aFinType;
            }
            set
            {
                if (_aFinType == value)
                    return;
                if (_aFinType == null || value == null || !_aFinType.Equals(value))
                {
                    _aFinType = value;
                    OnPropertyChanged(nameof(AFinType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _aFinCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AFinCode", Namespace="ESFA/ILR/2020-21")]
        public long AFinCodeValue
        {
            get
            {
                return _aFinCode;
            }
            set
            {
                if (!_aFinCode.Equals(value))
                {
                    _aFinCode = value;
                    OnPropertyChanged(nameof(AFinCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AFinCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AFinCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AFinCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> AFinCode
        {
            get
            {
                if (this.AFinCodeValueSpecified)
                {
                    return this.AFinCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AFinCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AFinCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AFinCodeValue = value.GetValueOrDefault();
                    this.AFinCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("AFinCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _aFinDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AFinDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime AFinDateValue
        {
            get
            {
                return _aFinDate;
            }
            set
            {
                if (!_aFinDate.Equals(value))
                {
                    _aFinDate = value;
                    OnPropertyChanged(nameof(AFinDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AFinDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AFinDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AFinDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> AFinDate
        {
            get
            {
                if (this.AFinDateValueSpecified)
                {
                    return this.AFinDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AFinDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AFinDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AFinDateValue = value.GetValueOrDefault();
                    this.AFinDateValueSpecified = value.HasValue;
                    OnPropertyChanged("AFinDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _aFinAmount;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("AFinAmount", Namespace="ESFA/ILR/2020-21")]
        public long AFinAmountValue
        {
            get
            {
                return _aFinAmount;
            }
            set
            {
                if (!_aFinAmount.Equals(value))
                {
                    _aFinAmount = value;
                    OnPropertyChanged(nameof(AFinAmountValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AFinAmount-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AFinAmount property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AFinAmountValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> AFinAmount
        {
            get
            {
                if (this.AFinAmountValueSpecified)
                {
                    return this.AFinAmountValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.AFinAmountValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.AFinAmountValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.AFinAmountValue = value.GetValueOrDefault();
                    this.AFinAmountValueSpecified = value.HasValue;
                    OnPropertyChanged("AFinAmount");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDeliveryProviderSpecDeliveryMonitoring", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDeliveryProviderSpecDeliveryMonitoring : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _provSpecDelMonOccur;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("ProvSpecDelMonOccur", Namespace="ESFA/ILR/2020-21")]
        public string ProvSpecDelMonOccur
        {
            get
            {
                return _provSpecDelMonOccur;
            }
            set
            {
                if (_provSpecDelMonOccur == value)
                    return;
                if (_provSpecDelMonOccur == null || value == null || !_provSpecDelMonOccur.Equals(value))
                {
                    _provSpecDelMonOccur = value;
                    OnPropertyChanged(nameof(ProvSpecDelMonOccur));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _provSpecDelMon;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("ProvSpecDelMon", Namespace="ESFA/ILR/2020-21")]
        public string ProvSpecDelMon
        {
            get
            {
                return _provSpecDelMon;
            }
            set
            {
                if (_provSpecDelMon == value)
                    return;
                if (_provSpecDelMon == null || value == null || !_provSpecDelMon.Equals(value))
                {
                    _provSpecDelMon = value;
                    OnPropertyChanged(nameof(ProvSpecDelMon));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerLearningDeliveryLearningDeliveryHE", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerLearningDeliveryLearningDeliveryHE : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _nUMHUS;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("NUMHUS", Namespace="ESFA/ILR/2020-21")]
        public string NUMHUS
        {
            get
            {
                return _nUMHUS;
            }
            set
            {
                if (_nUMHUS == value)
                    return;
                if (_nUMHUS == null || value == null || !_nUMHUS.Equals(value))
                {
                    _nUMHUS = value;
                    OnPropertyChanged(nameof(NUMHUS));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _sSN;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("SSN", Namespace="ESFA/ILR/2020-21")]
        public string SSN
        {
            get
            {
                return _sSN;
            }
            set
            {
                if (_sSN == value)
                    return;
                if (_sSN == null || value == null || !_sSN.Equals(value))
                {
                    _sSN = value;
                    OnPropertyChanged(nameof(SSN));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _qUALENT3;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("QUALENT3", Namespace="ESFA/ILR/2020-21")]
        public string QUALENT3
        {
            get
            {
                return _qUALENT3;
            }
            set
            {
                if (_qUALENT3 == value)
                    return;
                if (_qUALENT3 == null || value == null || !_qUALENT3.Equals(value))
                {
                    _qUALENT3 = value;
                    OnPropertyChanged(nameof(QUALENT3));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _sOC2000;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("SOC2000", Namespace="ESFA/ILR/2020-21")]
        public long SOC2000Value
        {
            get
            {
                return _sOC2000;
            }
            set
            {
                if (!_sOC2000.Equals(value))
                {
                    _sOC2000 = value;
                    OnPropertyChanged(nameof(SOC2000Value));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SOC2000-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SOC2000 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SOC2000ValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> SOC2000
        {
            get
            {
                if (this.SOC2000ValueSpecified)
                {
                    return this.SOC2000Value;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.SOC2000Value.Equals(value.GetValueOrDefault()) == false) 
                            || (this.SOC2000ValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.SOC2000Value = value.GetValueOrDefault();
                    this.SOC2000ValueSpecified = value.HasValue;
                    OnPropertyChanged("SOC2000");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _sEC;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("SEC", Namespace="ESFA/ILR/2020-21")]
        public long SECValue
        {
            get
            {
                return _sEC;
            }
            set
            {
                if (!_sEC.Equals(value))
                {
                    _sEC = value;
                    OnPropertyChanged(nameof(SECValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SEC-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SEC property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SECValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> SEC
        {
            get
            {
                if (this.SECValueSpecified)
                {
                    return this.SECValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.SECValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.SECValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.SECValue = value.GetValueOrDefault();
                    this.SECValueSpecified = value.HasValue;
                    OnPropertyChanged("SEC");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _uCASAPPID;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("UCASAPPID", Namespace="ESFA/ILR/2020-21")]
        public string UCASAPPID
        {
            get
            {
                return _uCASAPPID;
            }
            set
            {
                if (_uCASAPPID == value)
                    return;
                if (_uCASAPPID == null || value == null || !_uCASAPPID.Equals(value))
                {
                    _uCASAPPID = value;
                    OnPropertyChanged(nameof(UCASAPPID));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _tYPEYR;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("TYPEYR", Namespace="ESFA/ILR/2020-21")]
        public long TYPEYRValue
        {
            get
            {
                return _tYPEYR;
            }
            set
            {
                if (!_tYPEYR.Equals(value))
                {
                    _tYPEYR = value;
                    OnPropertyChanged(nameof(TYPEYRValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TYPEYR-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TYPEYR property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TYPEYRValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> TYPEYR
        {
            get
            {
                if (this.TYPEYRValueSpecified)
                {
                    return this.TYPEYRValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.TYPEYRValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.TYPEYRValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.TYPEYRValue = value.GetValueOrDefault();
                    this.TYPEYRValueSpecified = value.HasValue;
                    OnPropertyChanged("TYPEYR");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _mODESTUD;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("MODESTUD", Namespace="ESFA/ILR/2020-21")]
        public long MODESTUDValue
        {
            get
            {
                return _mODESTUD;
            }
            set
            {
                if (!_mODESTUD.Equals(value))
                {
                    _mODESTUD = value;
                    OnPropertyChanged(nameof(MODESTUDValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MODESTUD-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MODESTUD property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MODESTUDValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> MODESTUD
        {
            get
            {
                if (this.MODESTUDValueSpecified)
                {
                    return this.MODESTUDValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.MODESTUDValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.MODESTUDValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.MODESTUDValue = value.GetValueOrDefault();
                    this.MODESTUDValueSpecified = value.HasValue;
                    OnPropertyChanged("MODESTUD");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fUNDLEV;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FUNDLEV", Namespace="ESFA/ILR/2020-21")]
        public long FUNDLEVValue
        {
            get
            {
                return _fUNDLEV;
            }
            set
            {
                if (!_fUNDLEV.Equals(value))
                {
                    _fUNDLEV = value;
                    OnPropertyChanged(nameof(FUNDLEVValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FUNDLEV-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FUNDLEV property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FUNDLEVValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FUNDLEV
        {
            get
            {
                if (this.FUNDLEVValueSpecified)
                {
                    return this.FUNDLEVValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FUNDLEVValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FUNDLEVValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FUNDLEVValue = value.GetValueOrDefault();
                    this.FUNDLEVValueSpecified = value.HasValue;
                    OnPropertyChanged("FUNDLEV");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _fUNDCOMP;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("FUNDCOMP", Namespace="ESFA/ILR/2020-21")]
        public long FUNDCOMPValue
        {
            get
            {
                return _fUNDCOMP;
            }
            set
            {
                if (!_fUNDCOMP.Equals(value))
                {
                    _fUNDCOMP = value;
                    OnPropertyChanged(nameof(FUNDCOMPValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FUNDCOMP-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FUNDCOMP property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool FUNDCOMPValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> FUNDCOMP
        {
            get
            {
                if (this.FUNDCOMPValueSpecified)
                {
                    return this.FUNDCOMPValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.FUNDCOMPValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.FUNDCOMPValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.FUNDCOMPValue = value.GetValueOrDefault();
                    this.FUNDCOMPValueSpecified = value.HasValue;
                    OnPropertyChanged("FUNDCOMP");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private decimal _sTULOAD;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("STULOAD", Namespace="ESFA/ILR/2020-21")]
        public decimal STULOADValue
        {
            get
            {
                return _sTULOAD;
            }
            set
            {
                if (!_sTULOAD.Equals(value))
                {
                    _sTULOAD = value;
                    OnPropertyChanged(nameof(STULOADValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die STULOAD-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the STULOAD property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool STULOADValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> STULOAD
        {
            get
            {
                if (this.STULOADValueSpecified)
                {
                    return this.STULOADValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.STULOADValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.STULOADValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.STULOADValue = value.GetValueOrDefault();
                    this.STULOADValueSpecified = value.HasValue;
                    OnPropertyChanged("STULOAD");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _yEARSTU;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("YEARSTU", Namespace="ESFA/ILR/2020-21")]
        public long YEARSTUValue
        {
            get
            {
                return _yEARSTU;
            }
            set
            {
                if (!_yEARSTU.Equals(value))
                {
                    _yEARSTU = value;
                    OnPropertyChanged(nameof(YEARSTUValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die YEARSTU-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the YEARSTU property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool YEARSTUValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> YEARSTU
        {
            get
            {
                if (this.YEARSTUValueSpecified)
                {
                    return this.YEARSTUValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.YEARSTUValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.YEARSTUValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.YEARSTUValue = value.GetValueOrDefault();
                    this.YEARSTUValueSpecified = value.HasValue;
                    OnPropertyChanged("YEARSTU");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _mSTUFEE;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("MSTUFEE", Namespace="ESFA/ILR/2020-21")]
        public long MSTUFEEValue
        {
            get
            {
                return _mSTUFEE;
            }
            set
            {
                if (!_mSTUFEE.Equals(value))
                {
                    _mSTUFEE = value;
                    OnPropertyChanged(nameof(MSTUFEEValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MSTUFEE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MSTUFEE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MSTUFEEValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> MSTUFEE
        {
            get
            {
                if (this.MSTUFEEValueSpecified)
                {
                    return this.MSTUFEEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.MSTUFEEValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.MSTUFEEValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.MSTUFEEValue = value.GetValueOrDefault();
                    this.MSTUFEEValueSpecified = value.HasValue;
                    OnPropertyChanged("MSTUFEE");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private decimal _pCOLAB;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PCOLAB", Namespace="ESFA/ILR/2020-21")]
        public decimal PCOLABValue
        {
            get
            {
                return _pCOLAB;
            }
            set
            {
                if (!_pCOLAB.Equals(value))
                {
                    _pCOLAB = value;
                    OnPropertyChanged(nameof(PCOLABValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PCOLAB-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PCOLAB property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PCOLABValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> PCOLAB
        {
            get
            {
                if (this.PCOLABValueSpecified)
                {
                    return this.PCOLABValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PCOLABValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PCOLABValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PCOLABValue = value.GetValueOrDefault();
                    this.PCOLABValueSpecified = value.HasValue;
                    OnPropertyChanged("PCOLAB");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private decimal _pCFLDCS;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PCFLDCS", Namespace="ESFA/ILR/2020-21")]
        public decimal PCFLDCSValue
        {
            get
            {
                return _pCFLDCS;
            }
            set
            {
                if (!_pCFLDCS.Equals(value))
                {
                    _pCFLDCS = value;
                    OnPropertyChanged(nameof(PCFLDCSValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PCFLDCS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PCFLDCS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PCFLDCSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> PCFLDCS
        {
            get
            {
                if (this.PCFLDCSValueSpecified)
                {
                    return this.PCFLDCSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PCFLDCSValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PCFLDCSValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PCFLDCSValue = value.GetValueOrDefault();
                    this.PCFLDCSValueSpecified = value.HasValue;
                    OnPropertyChanged("PCFLDCS");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private decimal _pCSLDCS;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PCSLDCS", Namespace="ESFA/ILR/2020-21")]
        public decimal PCSLDCSValue
        {
            get
            {
                return _pCSLDCS;
            }
            set
            {
                if (!_pCSLDCS.Equals(value))
                {
                    _pCSLDCS = value;
                    OnPropertyChanged(nameof(PCSLDCSValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PCSLDCS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PCSLDCS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PCSLDCSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> PCSLDCS
        {
            get
            {
                if (this.PCSLDCSValueSpecified)
                {
                    return this.PCSLDCSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PCSLDCSValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PCSLDCSValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PCSLDCSValue = value.GetValueOrDefault();
                    this.PCSLDCSValueSpecified = value.HasValue;
                    OnPropertyChanged("PCSLDCS");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private decimal _pCTLDCS;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("PCTLDCS", Namespace="ESFA/ILR/2020-21")]
        public decimal PCTLDCSValue
        {
            get
            {
                return _pCTLDCS;
            }
            set
            {
                if (!_pCTLDCS.Equals(value))
                {
                    _pCTLDCS = value;
                    OnPropertyChanged(nameof(PCTLDCSValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PCTLDCS-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PCTLDCS property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool PCTLDCSValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 32.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> PCTLDCS
        {
            get
            {
                if (this.PCTLDCSValueSpecified)
                {
                    return this.PCTLDCSValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.PCTLDCSValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.PCTLDCSValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.PCTLDCSValue = value.GetValueOrDefault();
                    this.PCTLDCSValueSpecified = value.HasValue;
                    OnPropertyChanged("PCTLDCS");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _sPECFEE;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("SPECFEE", Namespace="ESFA/ILR/2020-21")]
        public long SPECFEEValue
        {
            get
            {
                return _sPECFEE;
            }
            set
            {
                if (!_sPECFEE.Equals(value))
                {
                    _sPECFEE = value;
                    OnPropertyChanged(nameof(SPECFEEValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SPECFEE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SPECFEE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SPECFEEValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> SPECFEE
        {
            get
            {
                if (this.SPECFEEValueSpecified)
                {
                    return this.SPECFEEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.SPECFEEValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.SPECFEEValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.SPECFEEValue = value.GetValueOrDefault();
                    this.SPECFEEValueSpecified = value.HasValue;
                    OnPropertyChanged("SPECFEE");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _nETFEE;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("NETFEE", Namespace="ESFA/ILR/2020-21")]
        public long NETFEEValue
        {
            get
            {
                return _nETFEE;
            }
            set
            {
                if (!_nETFEE.Equals(value))
                {
                    _nETFEE = value;
                    OnPropertyChanged(nameof(NETFEEValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NETFEE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NETFEE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NETFEEValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> NETFEE
        {
            get
            {
                if (this.NETFEEValueSpecified)
                {
                    return this.NETFEEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.NETFEEValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.NETFEEValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.NETFEEValue = value.GetValueOrDefault();
                    this.NETFEEValueSpecified = value.HasValue;
                    OnPropertyChanged("NETFEE");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _gROSSFEE;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("GROSSFEE", Namespace="ESFA/ILR/2020-21")]
        public long GROSSFEEValue
        {
            get
            {
                return _gROSSFEE;
            }
            set
            {
                if (!_gROSSFEE.Equals(value))
                {
                    _gROSSFEE = value;
                    OnPropertyChanged(nameof(GROSSFEEValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die GROSSFEE-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the GROSSFEE property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool GROSSFEEValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> GROSSFEE
        {
            get
            {
                if (this.GROSSFEEValueSpecified)
                {
                    return this.GROSSFEEValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.GROSSFEEValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.GROSSFEEValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.GROSSFEEValue = value.GetValueOrDefault();
                    this.GROSSFEEValueSpecified = value.HasValue;
                    OnPropertyChanged("GROSSFEE");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _dOMICILE;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("DOMICILE", Namespace="ESFA/ILR/2020-21")]
        public string DOMICILE
        {
            get
            {
                return _dOMICILE;
            }
            set
            {
                if (_dOMICILE == value)
                    return;
                if (_dOMICILE == null || value == null || !_dOMICILE.Equals(value))
                {
                    _dOMICILE = value;
                    OnPropertyChanged(nameof(DOMICILE));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _eLQ;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ELQ", Namespace="ESFA/ILR/2020-21")]
        public long ELQValue
        {
            get
            {
                return _eLQ;
            }
            set
            {
                if (!_eLQ.Equals(value))
                {
                    _eLQ = value;
                    OnPropertyChanged(nameof(ELQValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ELQ-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ELQ property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ELQValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ELQ
        {
            get
            {
                if (this.ELQValueSpecified)
                {
                    return this.ELQValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ELQValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ELQValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ELQValue = value.GetValueOrDefault();
                    this.ELQValueSpecified = value.HasValue;
                    OnPropertyChanged("ELQ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _hEPostCode;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 1000.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(1000)]
        [System.Xml.Serialization.XmlElementAttribute("HEPostCode", Namespace="ESFA/ILR/2020-21")]
        public string HEPostCode
        {
            get
            {
                return _hEPostCode;
            }
            set
            {
                if (_hEPostCode == value)
                    return;
                if (_hEPostCode == null || value == null || !_hEPostCode.Equals(value))
                {
                    _hEPostCode = value;
                    OnPropertyChanged(nameof(HEPostCode));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerDestinationandProgression", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerDestinationandProgression : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _learnRefNumber;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("LearnRefNumber", Namespace="ESFA/ILR/2020-21")]
        public string LearnRefNumber
        {
            get
            {
                return _learnRefNumber;
            }
            set
            {
                if (_learnRefNumber == value)
                    return;
                if (_learnRefNumber == null || value == null || !_learnRefNumber.Equals(value))
                {
                    _learnRefNumber = value;
                    OnPropertyChanged(nameof(LearnRefNumber));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _uLN;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("ULN", Namespace="ESFA/ILR/2020-21")]
        public long ULNValue
        {
            get
            {
                return _uLN;
            }
            set
            {
                if (!_uLN.Equals(value))
                {
                    _uLN = value;
                    OnPropertyChanged(nameof(ULNValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ULN-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ULN property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ULNValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> ULN
        {
            get
            {
                if (this.ULNValueSpecified)
                {
                    return this.ULNValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.ULNValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.ULNValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.ULNValue = value.GetValueOrDefault();
                    this.ULNValueSpecified = value.HasValue;
                    OnPropertyChanged("ULN");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.Generic.List<MessageLearnerDestinationandProgressionDPOutcome> _dPOutcome;
        
        [System.Xml.Serialization.XmlElementAttribute("DPOutcome", Namespace="ESFA/ILR/2020-21")]
        public System.Collections.Generic.List<MessageLearnerDestinationandProgressionDPOutcome> DPOutcome
        {
            get
            {
                return _dPOutcome;
            }
            private set
            {
                if (_dPOutcome == value)
                    return;
                if (_dPOutcome == null || value == null || !_dPOutcome.SequenceEqual(value))
                {
                    _dPOutcome = value;
                    OnPropertyChanged(nameof(DPOutcome));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DPOutcome-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DPOutcome collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DPOutcomeSpecified
        {
            get
            {
                return (this.DPOutcome.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MessageLearnerDestinationandProgression" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MessageLearnerDestinationandProgression" /> class.</para>
        /// </summary>
        public MessageLearnerDestinationandProgression()
        {
            this._dPOutcome = new System.Collections.Generic.List<MessageLearnerDestinationandProgressionDPOutcome>();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("MessageLearnerDestinationandProgressionDPOutcome", Namespace="ESFA/ILR/2020-21", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageLearnerDestinationandProgressionDPOutcome : System.ComponentModel.INotifyPropertyChanged
    {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string _outType;
        
        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Xml.Serialization.XmlElementAttribute("OutType", Namespace="ESFA/ILR/2020-21")]
        public string OutType
        {
            get
            {
                return _outType;
            }
            set
            {
                if (_outType == value)
                    return;
                if (_outType == null || value == null || !_outType.Equals(value))
                {
                    _outType = value;
                    OnPropertyChanged(nameof(OutType));
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private long _outCode;
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OutCode", Namespace="ESFA/ILR/2020-21")]
        public long OutCodeValue
        {
            get
            {
                return _outCode;
            }
            set
            {
                if (!_outCode.Equals(value))
                {
                    _outCode = value;
                    OnPropertyChanged(nameof(OutCodeValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutCode-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OutCode property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OutCodeValueSpecified { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<long> OutCode
        {
            get
            {
                if (this.OutCodeValueSpecified)
                {
                    return this.OutCodeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OutCodeValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OutCodeValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OutCodeValue = value.GetValueOrDefault();
                    this.OutCodeValueSpecified = value.HasValue;
                    OnPropertyChanged("OutCode");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _outStartDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OutStartDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime OutStartDateValue
        {
            get
            {
                return _outStartDate;
            }
            set
            {
                if (!_outStartDate.Equals(value))
                {
                    _outStartDate = value;
                    OnPropertyChanged(nameof(OutStartDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutStartDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OutStartDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OutStartDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> OutStartDate
        {
            get
            {
                if (this.OutStartDateValueSpecified)
                {
                    return this.OutStartDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OutStartDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OutStartDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OutStartDateValue = value.GetValueOrDefault();
                    this.OutStartDateValueSpecified = value.HasValue;
                    OnPropertyChanged("OutStartDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _outEndDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OutEndDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime OutEndDateValue
        {
            get
            {
                return _outEndDate;
            }
            set
            {
                if (!_outEndDate.Equals(value))
                {
                    _outEndDate = value;
                    OnPropertyChanged(nameof(OutEndDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutEndDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OutEndDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OutEndDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> OutEndDate
        {
            get
            {
                if (this.OutEndDateValueSpecified)
                {
                    return this.OutEndDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OutEndDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OutEndDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OutEndDateValue = value.GetValueOrDefault();
                    this.OutEndDateValueSpecified = value.HasValue;
                    OnPropertyChanged("OutEndDate");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.DateTime _outCollDate;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("OutCollDate", Namespace="ESFA/ILR/2020-21", DataType="date")]
        public System.DateTime OutCollDateValue
        {
            get
            {
                return _outCollDate;
            }
            set
            {
                if (!_outCollDate.Equals(value))
                {
                    _outCollDate = value;
                    OnPropertyChanged(nameof(OutCollDateValue));
                }
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OutCollDate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OutCollDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OutCollDateValueSpecified { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> OutCollDate
        {
            get
            {
                if (this.OutCollDateValueSpecified)
                {
                    return this.OutCollDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                if (((this.OutCollDateValue.Equals(value.GetValueOrDefault()) == false) 
                            || (this.OutCollDateValueSpecified.Equals(value.HasValue) == false)))
                {
                    this.OutCollDateValue = value.GetValueOrDefault();
                    this.OutCollDateValueSpecified = value.HasValue;
                    OnPropertyChanged("OutCollDate");
                }
            }
        }
    }
}
