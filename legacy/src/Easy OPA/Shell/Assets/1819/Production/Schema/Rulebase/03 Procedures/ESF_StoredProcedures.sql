if object_id('[Rulebase].[ESF_Get_Cases]','p') is not null
	drop procedure [Rulebase].[ESF_Get_Cases]
go
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:35
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================
create procedure [Rulebase].[ESF_Get_Cases] as

	begin
		set nocount on
		select
			CaseData
		from
			[Rulebase].[ESF_Cases]
	end
GO
if object_id('[Rulebase].[ESF_Insert_Cases]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_Cases]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:35
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================
create procedure [Rulebase].[ESF_Insert_Cases] as

	begin
		set nocount on

		insert into
			[Rulebase].[ESF_Cases]
			(
				[LearnRefNumber],
				CaseData
			)
		select
			ControllingTable.[LearnRefNumber],
			convert(xml,
				(
					select
						[LearningProvider].[UKPRN] as [@UKPRN],
						(
							select
								l.[DateOfBirth] as [@DateOfBirth],
								l.[LearnRefNumber] as [@LearnRefNumber],
								(
									select
										les.[DateEmpStatApp] as [@DateEmpStatApp],
										les.[EmpId] as [@EmpId],
										les.[EmpStat] as [@EMPStat]
									from
										[Valid].[LearnerEmploymentStatus] as les
									where
										les.[LearnRefNumber] = l.[LearnRefNumber]
									for xml path ('LearnerEmploymentStatus'), type
								),
								(
									select
										ld.[AchDate] as [@AchDate],
										ld.[AddHours] as [@AddHours],
										ld.[AimSeqNumber] as [@AimSeqNumber],
										[LOT].[CalcMethod] as [@CalcMethod],
										ld.[CompStatus] as [@CompStatus],
										ld.[ConRefNumber] as [@ConRefNumber],
										lld.[LearningDeliveryGenre] as [@GenreCode],
										ld.[LearnActEndDate] as [@LearnActEndDate],
										ld.[LearnAimRef] as [@LearnAimRef],
										ld.[LearnPlanEndDate] as [@LearnPlanEndDate],
										ld.[LearnStartDate] as [@LearnStartDate],
										LDM.LDM1 as [@LrnDelFAM_LDM1],
										LDM.LDM2 as [@LrnDelFAM_LDM2],
										LDM.LDM3 as [@LrnDelFAM_LDM3],
										LDM.LDM4 as [@LrnDelFAM_LDM4],
										RES.LearnDelFAMCode as [@LrnDelFAM_RES],
										ld.[OrigLearnStartDate] as [@OrigLearnStartDate],
										ld.[OtherFundAdj] as [@OtherFundAdj],
										ld.[Outcome] as [@Outcome],
										ld.[PriorLearnFundAdj] as [@PriorLearnFundAdj],
										(
											select
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[contractEndDate] as [@EffectiveContractEndDate],
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[contractStartDate] as [@EffectiveContractStartDate],
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[learningRatePremiumFactor] as [@ESFDataPremiumFactor],
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[ExternalDeliverableCode] as [@ESFDeliverableCode],
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[unitCost] as [@UnitCost]
											from
												(
													select
														[vw_ContractDescription].[contractEndDate],
														[vw_ContractDescription].[contractStartDate],
														[vw_ContractDescription].[learningRatePremiumFactor],
														[DeliverableCodeMappings].[ExternalDeliverableCode],
														[vw_ContractDescription].[unitCost],
														[vw_ContractDescription].[contractAllocationNumber],
														[DeliverableCodeMappings].[FundingStreamPeriodCode],
														[DeliverableCodeMappings].[FCSDeliverableCode]
													from
														[Reference].[DeliverableCodeMappings]
														inner join [Reference].[vw_ContractDescription]
															on [DeliverableCodeMappings].[FundingStreamPeriodCode]=[vw_ContractDescription].[fundingStreamPeriodCode]
															and [DeliverableCodeMappings].[FCSDeliverableCode]=[vw_ContractDescription].[deliverableCode]
												)  as LearningDelivery_vw_ContractDescription_DeliverableCodeMappings
											where
												[LearningDelivery_vw_ContractDescription_DeliverableCodeMappings].[contractAllocationNumber]=ld.[ConRefNumber]
											for xml path ('ESFData'), type
										),
										(
											select
												lf.[FundingCategory] as [@LARSFundingCategory],
												lf.[EffectiveFrom] as [@LARSFundingEffectiveFrom],
												lf.[EffectiveTo] as [@LARSFundingEffectiveTo],
												lf.[RateWeighted] as [@LARSFundingWeightedRate]
											from
												[Reference].[LARS_Funding] as lf
											where
												lf.[LearnAimRef] = ld.[LearnAimRef]
											for xml path ('LearningDeliveryLARSFunding'), type
										),
										(
											select
												lav.[BasicSkillsType] as [@LearnDelAnnValBasicSkillsTypeCode],
												lav.[EffectiveFrom] as [@LearnDelAnnValDateFrom],
												lav.[EffectiveTo] as [@LearnDelAnnValDateTo]
											from
												[Reference].[LARS_AnnualValue] as lav
											where
												lav.[LearnAimRef] = ld.[LearnAimRef]
											for xml path ('LearningDeliveryAnnualValue'), type
										),
										(
											select
												[SFA_PostcodeAreaCost].[EffectiveFrom] as [@AreaCosEffectiveFrom],
												[SFA_PostcodeAreaCost].[EffectiveTo] as [@AreaCosEffectiveTo],
												[SFA_PostcodeAreaCost].[AreaCostFactor] as [@AreaCosFactor]
											from
												[Reference].[SFA_PostcodeAreaCost]
											where
												[SFA_PostcodeAreaCost].[Postcode]=ld.[DelLocPostCode]
											for xml path ('SFA_PostcodeAreaCost'), type
										)
									from
										[Valid].[LearningDelivery] as ld
										left join [Reference].[LARS_LearningDelivery] as lld
											on lld.[LearnAimRef] = ld.[LearnAimRef]
										left join
											(
												select
													[Lot].[CalcMethod],
													[ContractAllocation].[ContractAllocationNumber],
													[Lot].[TenderSpecificationReference],
													[Lot].[LotReference]
												from
													[Reference].[Lot]
													inner join [Reference].[ContractAllocation]
														on [Lot].[TenderSpecificationReference]=[ContractAllocation].[TenderSpecReference]
														and [Lot].[LotReference]=[ContractAllocation].[LotReference]
											)  as LOT
												on [LOT].[ContractAllocationNumber]=ld.[ConRefNumber]
										left join Valid.LearningDeliveryFAM as RES
											on RES.LearnRefNumber = ld.LearnRefNumber
											and RES.AimSeqNumber = ld.AimSeqNumber
											and RES.LearnDelFAMType = 'RES'
										left join
										(
											select
												[LearnRefNumber],
												max([LDM1]) as [LDM1],
												max([LDM2]) as [LDM2],
												max([LDM3]) as [LDM3],
												max([LDM4]) as [LDM4]
											from
												(
													select
														LearnRefNumber,
														case row_number() over (partition by [LearnRefNumber] order by [LearnRefNumber]) when 1 then LearnDelFAMCode else null end  as [LDM1],
														case row_number() over (partition by [LearnRefNumber] order by [LearnRefNumber]) when 2 then LearnDelFAMCode else null end  as [LDM2],
														case row_number() over (partition by [LearnRefNumber] order by [LearnRefNumber]) when 3 then LearnDelFAMCode else null end  as [LDM3],
														case row_number() over (partition by [LearnRefNumber] order by [LearnRefNumber]) when 4 then LearnDelFAMCode else null end  as [LDM4]
													from
														[Valid].[LearningDeliveryFAM]
													where
														[LearnDelFAMType]='LDM'
												) as [LDMs]
											group by
												[LearnRefNumber]
										) as [LDM]
											on [LDM].[LearnRefNumber]=ld.[LearnRefNumber]
									where
										ld.[LearnRefNumber] = l.[LearnRefNumber]
										and ld.[FundModel]=70
									for xml path ('LearningDelivery'), type
								),
								(
									select
										dp.[OutCode] as [@OutCode],
										dp.[OutCollDate] as [@OutCollDate],
										dp.[OutEndDate] as [@OutEndDate],
										dp.[OutStartDate] as [@OutStartDate],
										dp.[OutType] as [@OutType]
									from
										[Valid].[DPOutcome] as dp
									where
										dp.[LearnRefNumber] = l.[LearnRefNumber]
									for xml path ('DPOutcome'), type
								)
							from
								[Valid].[Learner] as l
							where
								l.[LearnRefNumber] = globalLearner.[LearnRefNumber]
							for xml path ('Learner'), type
						)
					from
						Valid.Learner as globalLearner
						cross join [Valid].[LearningProvider]
						cross join [Reference].[LARS_Current_Version]	
					where
						globalLearner.LearnRefNumber = ControllingTable.LearnRefNumber				
					for xml path ('global'), type
				)
			)
		from
			[Valid].[Learner] ControllingTable
			inner join
				(
					select distinct
						[LearningDelivery].[LearnRefNumber]
					from
						[Valid].[LearningDelivery]
					where
						[LearningDelivery].[FundModel]=70
				) [Filter_LearningDelivery]
				on [Filter_LearningDelivery].[LearnRefNumber]=[ControllingTable].[LearnRefNumber]
	end
GO
if object_id('[Rulebase].[ESF_Insert_global]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_global]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================

create procedure [Rulebase].[ESF_Insert_global]
	(
		@RulebaseVersion varchar(10),
		@UKPRN int
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ESF_global]
			(
				UKPRN
				,RulebaseVersion
			)
		values
		(
			@UKPRN,
			@RulebaseVersion
		)
	end
go
if object_id('[Rulebase].[ESF_Insert_Learner]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_Learner]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================

create procedure [Rulebase].[ESF_Insert_Learner]
	(
		@LearnRefNumber varchar(12)
	)
as
	begin
		set nocount on
	end
go
if object_id('[Rulebase].[ESF_Insert_LearningDelivery]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_LearningDelivery]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================

create procedure [Rulebase].[ESF_Insert_LearningDelivery]
	(
		@LearnRefNumber varchar(12),
		@Achieved bit,
		@AddProgCostElig bit,
		@AdjustedAreaCostFactor decimal(9,5),
		@AdjustedPremiumFactor decimal(9,5),
		@AdjustedStartDate date,
		@AimClassification varchar(50),
		@AimSeqNumber int,
		@AimValue decimal(10,5),
		@ApplicWeightFundRate decimal(10,5),
		@EligibleProgressionOutcomeCode bigint,
		@EligibleProgressionOutcomeType varchar(4),
		@EligibleProgressionOutomeStartDate date,
		@FundStart bit,
		@LARSWeightedRate decimal(10,5),
		@LatestPossibleStartDate date,
		@LDESFEngagementStartDate date,
		@PotentiallyEligibleForProgression bit,
		@ProgressionEndDate date,
		@Restart bit,
		@WeightedRateFromESOL decimal(10,5),
		@LearnDelLearnerEmpAtStart bit
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ESF_LearningDelivery]
		(
			LearnRefNumber,
			AimSeqNumber,
			Achieved,
			AddProgCostElig,
			AdjustedAreaCostFactor,
			AdjustedPremiumFactor,
			AdjustedStartDate,
			AimClassification,
			AimValue,
			ApplicWeightFundRate,
			EligibleProgressionOutcomeCode,
			EligibleProgressionOutcomeType,
			EligibleProgressionOutomeStartDate,
			LearnDelLearnerEmpAtStart,
			FundStart,
			LARSWeightedRate,
			LatestPossibleStartDate,
			LDESFEngagementStartDate,
			PotentiallyEligibleForProgression,
			ProgressionEndDate,
			Restart,
			WeightedRateFromESOL
		)
		values 
		(
			@LearnRefNumber,
			@AimSeqNumber,
			@Achieved,
			@AddProgCostElig,
			@AdjustedAreaCostFactor,
			@AdjustedPremiumFactor,
			@AdjustedStartDate,
			@AimClassification,
			@AimValue,
			@ApplicWeightFundRate,
			@EligibleProgressionOutcomeCode,
			@EligibleProgressionOutcomeType,
			@EligibleProgressionOutomeStartDate,
			@LearnDelLearnerEmpAtStart,
			@FundStart,
			@LARSWeightedRate,
			@LatestPossibleStartDate,
			@LDESFEngagementStartDate,
			@PotentiallyEligibleForProgression,
			@ProgressionEndDate,
			@Restart,
			@WeightedRateFromESOL
		)
	end
go
if object_id('[Rulebase].[ESF_Insert_LearningDeliveryDeliverable]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_LearningDeliveryDeliverable]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================

create procedure [Rulebase].[ESF_Insert_LearningDeliveryDeliverable]
	(
		@LearnRefNumber varchar(12),
		@AimSeqNumber int,
		@AchievementEarnings decimal(10,5),
		@AdditionalProgCostEarnings decimal(10,5),
		@DeliverableCode varchar(5),
		@DeliverableUnitCost decimal(10,5),
		@DeliverableVolume bigint,
		@ProgressionEarnings decimal(10,5),
		@ReportingVolume int,
		@StartEarnings decimal(10,5)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ESF_LearningDeliveryDeliverable]
		(
			LearnRefNumber
			,AimSeqNumber
			,DeliverableCode
			,DeliverableUnitCost
		)
		values 
		(
			@LearnRefNumber,
			@AimSeqNumber,
			@DeliverableCode,
			@DeliverableUnitCost
		)
	end
go
if object_id('[Rulebase].[ESF_Insert_LearningDeliveryDeliverable_PeriodisedValues]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_LearningDeliveryDeliverable_PeriodisedValues]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================
create procedure [Rulebase].[ESF_Insert_LearningDeliveryDeliverable_PeriodisedValues]
	(
		@LearnRefNumber varchar(12),
		@AimSeqNumber int,
		@DeliverableCode varchar(5),
		@AttributeName varchar(100),
		@Period_1 decimal(15,5),
		@Period_2 decimal(15,5),
		@Period_3 decimal(15,5),
		@Period_4 decimal(15,5),
		@Period_5 decimal(15,5),
		@Period_6 decimal(15,5),
		@Period_7 decimal(15,5),
		@Period_8 decimal(15,5),
		@Period_9 decimal(15,5),
		@Period_10 decimal(15,5),
		@Period_11 decimal(15,5),
		@Period_12 decimal(15,5)
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ESF_LearningDeliveryDeliverable_PeriodisedValues]
				(
					LearnRefNumber,
					AimSeqNumber,
					DeliverableCode,
					AttributeName,
					Period_1,
					Period_2,
					Period_3,
					Period_4,
					Period_5,
					Period_6,
					Period_7,
					Period_8,
					Period_9,
					Period_10,
					Period_11,
					Period_12
				)
		values
			(
				@LearnRefNumber,
				@AimSeqNumber,
				@DeliverableCode,
				@AttributeName,
				@Period_1,
				@Period_2,
				@Period_3,
				@Period_4,
				@Period_5,
				@Period_6,
				@Period_7,
				@Period_8,
				@Period_9,
				@Period_10,
				@Period_11,
				@Period_12
			)
	end
GO
if object_id('[Rulebase].[ESF_PivotTemporals_LearningDeliveryDeliverable]','p') is not null
	drop procedure [Rulebase].[ESF_PivotTemporals_LearningDeliveryDeliverable]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================
create procedure [Rulebase].[ESF_PivotTemporals_LearningDeliveryDeliverable] as
	begin
		truncate table [Rulebase].[ESF_LearningDeliveryDeliverable_Period]
		insert into
			[Rulebase].[ESF_LearningDeliveryDeliverable_Period]
		(
			LearnRefNumber
			,AimSeqNumber
			,DeliverableCode
			,Period
			,AchievementEarnings
			,AdditionalProgCostEarnings
			,DeliverableVolume
			,ProgressionEarnings
			,ReportingVolume
			,StartEarnings
		)
		select
			LearnRefNumber,
			AimSeqNumber,
			DeliverableCode,
			Period,
			max(case AttributeName when 'AchievementEarnings' then Value else null end) AchievementEarnings,
			max(case AttributeName when 'AdditionalProgCostEarnings' then Value else null end) AdditionalProgCostEarnings,
			max(case AttributeName when 'DeliverableVolume' then Value else null end) DeliverableVolume,
			max(case AttributeName when 'ProgressionEarnings' then Value else null end) ProgressionEarnings,
			max(case AttributeName when 'ReportingVolume' then Value else null end) ReportingVolume,
			max(case AttributeName when 'StartEarnings' then Value else null end) StartEarnings
		from
			(
				select
					LearnRefNumber,
					AimSeqNumber,
					DeliverableCode,
					AttributeName,
					cast(substring(PeriodValue.Period,8,2) as int) Period,
					PeriodValue.Value
				from
					[Rulebase].[ESF_LearningDeliveryDeliverable_PeriodisedValues]
					unpivot (Value for Period in (Period_1,Period_2,Period_3,Period_4,Period_5,Period_6,Period_7,Period_8,Period_9,Period_10,Period_11,Period_12)) as PeriodValue
			) Bob
		group by
			LearnRefNumber,
			AimSeqNumber,
			DeliverableCode,
			Period
	end
GO
if object_id('[Rulebase].[ESF_Insert_DPOutcome]','p') is not null
	drop procedure [Rulebase].[ESF_Insert_DPOutcome]
GO
-- =====================================================================================================
-- Generated by Data Dictionary Version 1.0.0.0
-- Date: 31 May 2017 07:36
-- Profile: DCSS Calculation
-- Rulebase Version: ILR ESF Funding Calc 1617, Version 1617.06
-- =====================================================================================================

create procedure [Rulebase].[ESF_Insert_DPOutcome]
	(
		@LearnRefNumber varchar(12),
		@OutCode int,
		@OutcomeDateForProgression date,
		@OutStartDate date,
		@OutType varchar(30),
		@PotentialESFProgressionType bit,
		@ProgressionType varchar(50),
		@ReachedSixMonthPoint bit,
		@ReachedThreeMonthPoint bit,
		@ReachedTwelveMonthPoint bit
	)
as
	begin
		set nocount on
		insert into
			[Rulebase].[ESF_DPOutcome]
		(
			LearnRefNumber,
			OutCode,
			OutType,
			OutStartDate,
			OutcomeDateForProgression,
			PotentialESFProgressionType,
			ProgressionType,
			ReachedSixMonthPoint,
			ReachedThreeMonthPoint,
			ReachedTwelveMonthPoint
		)
		values 
		(
			@LearnRefNumber,
			@OutCode,
			@OutType,
			@OutStartDate,
			@OutcomeDateForProgression,
			@PotentialESFProgressionType,
			@ProgressionType,
			@ReachedSixMonthPoint,
			@ReachedThreeMonthPoint,
			@ReachedTwelveMonthPoint
		)
	end
go
