name: ${{ parameters.VersionNumberMajor }}.${{ parameters.VersionNumberMinor }}.$(Rev:r)

parameters:
- name: BuildConfiguration
  displayName: Release or Debug
  type: string
  default: Release
  values:
  - Release
  - Debug

- name: VersionNumberMajor
  displayName: 'Version Number : Major'
  type: string
  default: '2021'
- name: VersionNumberMinor
  displayName: 'Version Number : Minor'
  type: string
  default: '1'
  
trigger:
  paths:
    exclude:
    - Old

resources:
  repositories:
  - repository: templates
    type: git
    name: DC-Infrastructure-YML-Files

variables:
- group: 'CodeSign KV'
- name: "Build.Platform"
  value: 'Any CPU'
- name: "Nuget.Feed"
  value: 'dct-pkg'  
- name: "Nuget.Version"
  value: '5.3.0'
- name: "AcademicYear"
  value: '2021'
- name: EPOAShell
  value: 'Easy OPA\Shell'  
  



stages:
#********************************************************************************
# Build Application and put into Afticats.
#********************************************************************************
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    workspace:
        clean: all

    pool:
      name: DCT
      demands:
      - IsBuildServer

    steps:    
    - task: PowerShell@2
      name: CheckBranch
      displayName: Which Branh is Build Running from.
      inputs:
        targetType: 'inline'
        script: |
                  $BranchName = "$(Build.SourceBranchName)"
                  $IsThisDeployableBranch = if (($BranchName.ToUpper() -eq "MASTER") -or ($BranchName.ToUpper() -eq "DEVELOP")-or ($BranchName.ToUpper() -like "RELEASE*")){ $true } else {$false}
                  Write-Host "##vso[task.setvariable variable=IsDeployableBranch;isOutput=true]$($IsThisDeployableBranch)";

#********************************************************************************
# Install required software
#********************************************************************************   
    - task: UseGitVersion@5
      enabled: false
      displayName: "Check forGitVersion"
      inputs:
        versionSpec: '5.x'

    - task: NuGetToolInstaller@1
      displayName: "Check for NuGet Tools"
      inputs:
        checkLatest: true
#********************************************************************************
# Workout application Number from GitVersion
#********************************************************************************   
#    - task: gittools.gitversion.gitversion-task.GitVersion@4
#      displayName: GitVersion
#      inputs:
#        updateAssemblyInfo: true
#        preferBundledVersion: false

#********************************************************************************
# Restore NuGet Packages
#********************************************************************************   
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: 'src\**\*.sln'
        vstsFeed: '$(Nuget.Feed)'
        noCache: true

#********************************************************************************
# Set Assemblt to Build Number
#********************************************************************************   
    - task: VersionAssemblies@2
      inputs:
        Path: '$(Build.SourcesDirectory)\legacy\src'
        VersionNumber: '$(Build.BuildNumber)'
        InjectVersion: true
        FilenamePattern: 'AssemblyVersionInfo.*'
        OutputVersion: 'OutputedVersion'

#********************************************************************************
# Build Solution
#********************************************************************************   
    - task: MSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: 'src\**\*.sln'
        platform: '$(Build.Platform)'
        configuration: '${{ parameters.BuildConfiguration }}'
        msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber)'
        clean: true
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true

#********************************************************************************
# Copy Files into Aftifact Folder before test.
#********************************************************************************
    - task: CopyFiles@2
      displayName: 'Copy Scripts File to Scripts Folder'
      inputs:
        Contents: 'GenerateZipFilename.ps1'
        TargetFolder: '$(build.ArtifactStagingDirectory)\Scripts'
        flattenFolders: true
        CleanTargetFolder: true

    - task: CopyFiles@2
      displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/legacy/src'
        Contents: |
         **\*${{ parameters.BuildConfiguration }}*\*Interface.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
        CleanTargetFolder: true
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/legacy/src'
        Contents: |
         **\*${{ parameters.BuildConfiguration }}*\*.nupkg
         !**\packages\**
         !**\bin\x64\**
        TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
        CleanTargetFolder: true
        flattenFolders: true


    - task: CopyFiles@2
      displayName: 'Copy WPF Application File to Artifact Folder'
      inputs:
        SourceFolder: 'src\$(EPOAShell)\bin\${{ parameters.BuildConfiguration }}'  
        Contents: '**\!(*.pdb)'
        TargetFolder: '$(build.ArtifactStagingDirectory)\DesktopApplication'
        OverWrite: true'  
        
    - task: TotalALM.totalalm-tokenization.tokenization-build-task.Tokenization@2
      displayName: 'Tokenization: Transform Application config file'
      enabled: true
      inputs:
        SourcePath: '$(build.ArtifactStagingDirectory)\DesktopApplication'
        TargetFileNames: '*.exe.config'
        RequireVariable: false

#********************************************************************************
# Count Artifact Files to decide what to Publish
#********************************************************************************    
    - task: PowerShell@2
      displayName: 'Check What to Publish'
      continueOnError: true  
      inputs:
        targetType: 'inline'
        script: |
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_DesktopApplication]$(Test-Path '$(build.artifactstagingdirectory)\DesktopApplication' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_NugetPackages]$(Test-Path '$(build.artifactstagingdirectory)\Nuget' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Databases]$(Test-Path '$(build.artifactstagingdirectory)\Databases' -PathType Any)";
                  Write-Host "##vso[task.setvariable variable=PublishArtifact_Scripts]$(Test-Path '$(build.artifactstagingdirectory)\Scripts' -PathType Any)";
                  
#********************************************************************************
# CodeSign Script body
# Application Signing execution begins here
#********************************************************************************
    - task: PowerShell@2
      displayName: 'CodeSign DfE DesktopApplications'
      enabled: true  
      env:
        CODESIGNPASSWORD: $(CodeSignPwdDfE)
        CODESIGNCERT: $(CodeSignCertificatePFX)
      inputs:
        filePath: 'DFE_Code_Signing.ps1'
        arguments: '-StartFolder "$(build.ArtifactStagingDirectory)\DesktopApplication" -FileFilter "ILR*"'
        workingDirectory: '$(build.ArtifactStagingDirectory)'

#********************************************************************************
# Run Unit Tests
#********************************************************************************
    - task: VSTest@2
      displayName: 'Run Unit Tests'
      enabled: true
      inputs:
        testAssemblyVer2: |
         **\${{ parameters.BuildConfiguration }}\*test*.dll
         !**\obj\**
        configuration: '${{ parameters.BuildConfiguration }}'
        runInParallel: true
        codeCoverageEnabled: true
        diagnosticsEnabled: true

#********************************************************************************
# Publish Artifacts
#********************************************************************************    
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      enabled: false
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      continueOnError: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NugetPackages'
      condition: and(succeeded(), eq(variables['PublishArtifact_NugetPackages'], 'True'))
      inputs:
        ArtifactName: NugetPackages
        PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: DesktopApplication'
      enabled: true
      inputs:
        ArtifactName: DesktopApplication
        PathtoPublish: '$(build.artifactstagingdirectory)\DesktopApplication'
      #condition: and(succeeded(), eq(variables['PublishArtifact_DesktopApplication'], 'True'))
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Scripts'
      condition: and(succeeded(), eq(variables['PublishArtifact_Scripts'], 'True'))
      enabled: true
      inputs:
        ArtifactName: Scripts
        PathtoPublish: '$(build.artifactstagingdirectory)\Scripts'
      
