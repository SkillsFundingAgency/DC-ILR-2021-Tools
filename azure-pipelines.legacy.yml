
name:  $(GitVersion.NuGetVersion)

trigger:
  paths:
    include:
    - legacy/*
    - azure-pipelines.legacy.yml
    exclude:
    - src/*

resources:
- repo: self
  fetchDepth: 30

variables:
- group: 'CodeSign KV'
- name: Parameters.solution 
  value: '**\legacy\src\Easy OPA\*.sln'
- name: Parameters.nugetFeedName 
  value: 'dct-pkg'
- name: BuildConfiguration
  value: 'Release'
- name: BuildPlatform
  value: 'Any CPU'
  
- name: ShellTool
  value: 'src\Easy OPA\Shell'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      name: DCT
      demands:
      - IsBuildServer

    steps:
    - task: DotNetCoreInstaller@2
      inputs:
        version: 2.2.110
      displayName: 'Use .NET Core sdk 2.2.8 (VS2019 = 2.2.207) | (VS2017 = 2.2.110)'

    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet >=5.3.1'
      enabled: true
      inputs:
        versionSpec: '>=5.3.1'

    - task: gittools.gitversion.gitversion-task.GitVersion@5
      displayName: GitVersion
      enabled: true
      inputs:
        runtime: full
        updateAssemblyInfo: true
        preferBundledVersion: false

    - task: PowerShell@1
      displayName: 'Display Variables'
      enabled: false
      inputs:
        scriptType: inlineScript
        inlineScript: |
         $var = (gci env:*).GetEnumerator() | Sort-Object Name
         $out = ""
         Foreach ($v in $var) 
         {
         write-output "Name: $($v.Name)  | Value : $($v.Value)"
         }

    ## Restore & Build 
    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      enabled: true
      inputs:
        restoreSolution: '$(Parameters.solution)'
        vstsFeed: '$(Parameters.nugetFeedName)'

    - task: MSBuild@1
      displayName: 'Build solution EasyOPA'
      inputs:
        solution: '$(Parameters.solution)'
        msbuildArguments: '/p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        clean: true
        maximumCpuCount: true
        restoreNugetPackages: true

    - task: VSBuild@1
      displayName: 'Build solution EasyOPA'
      enabled: false
      inputs:
        solution: '$(Parameters.solution)'
        msbuildArgs: '/p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber)'
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        vstsFeed: '$(Parameters.nugetFeedName)'
        clean: true
        
    #********************************************************************************
    # Copy Files into Aftifact Folder before test.
    #********************************************************************************
    - task: CopyFiles@2
      displayName: 'Copy Scripts File to Scripts Folder'
      enabled: false
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/legacy/src'
        Contents: 'GenerateZipFilename.ps1'
        TargetFolder: '$(build.ArtifactStagingDirectory)\Scripts'
        flattenFolders: true
        CleanTargetFolder: true

    - task: CopyFiles@2
      displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/legacy/src'
        Contents: |
         **/legacy/*$(BuildConfiguration)*/*Interface*.nupkg
         !**/packages/**
         !**/bin/x64/**
        TargetFolder: '$(build.artifactstagingdirectory)/Nuget/Interface'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/legacy/src'
        Contents: |
         **/legacy/*$(BuildConfiguration)*/*.nupkg
         !**/*Interface*
         !**/packages/**
         !**/bin/x64/**
        TargetFolder: '$(build.artifactstagingdirectory)/Nuget/Packages'
        flattenFolders: true

    - task: CopyFiles@2
      displayName: 'Copy EASY OPA Application File to Artifact Folder'
      inputs:
        SourceFolder: 'legacy\$(ShellTool)\bin\$(BuildConfiguration)'  
        Contents: '**\!(*.pdb)'
        TargetFolder: '$(build.ArtifactStagingDirectory)\LegacyApplication'
        
    - task: TotalALM.totalalm-tokenization.tokenization-build-task.Tokenization@2
      displayName: 'Tokenization: Transform Application config file'
      enabled: true
      inputs:
        SourcePath: '$(build.ArtifactStagingDirectory)\LegacyApplication'
        TargetFileNames: '*.exe.config'
        RequireVariable: false

    #********************************************************************************
    # CodeSign Script body
    # Application Signing execution begins here
    #********************************************************************************

    - task: PowerShell@2
      displayName: 'CodeSign DfE LegacyApplications'
      enabled: true  
      env:
        CODESIGNPASSWORD: $(CodeSignPwdDfE)
        CODESIGNCERT: $(CodeSignCertificatePFX)
      inputs:
        filePath: 'DFE_Code_Signing.ps1'
        arguments: '-StartFolder "$(build.ArtifactStagingDirectory)\LegacyApplication"'
        workingDirectory: '$(Build.SourcesDirectory)'

    #********************************************************************************
    # Run Unit Tests
    #********************************************************************************

    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      enabled: false
      inputs:
        command: test
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        nobuild: true
        projects: '**/*Tests.csproj'

    - task: VSTest@2
      displayName: 'Run Unit Tests'
      enabled: true
      inputs:
        testAssemblyVer2: |
         **\$(BuildConfiguration)\*test*.dll
         !**\obj\**
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        runInParallel: true
        codeCoverageEnabled: true
        diagnosticsEnabled: true

    #********************************************************************************
    # Generate Code Coverage Report and Publish
    #********************************************************************************
#     
#    ## Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
#    # First install the tool on the machine, then run it
#    - script: |
#        dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.3.6  
#        reportgenerator -reports:$(Build.SourcesDirectory)/**/*Tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
#      displayName: Create Code coverage report
#      
#    # Publish the code coverage result (summary and web site)
#    # The summary allows to view the coverage percentage in the summary tab
#    # The web site allows to view which lines are covered directly in Azure Pipeline
#    - task: PublishCodeCoverageResults@1
#      displayName: 'Publish code coverage'
#      inputs:
#        codeCoverageTool: Cobertura
#        summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
#        reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
#     
    #********************************************************************************
    # Publish Artifacts
    #********************************************************************************
     
    - task: PublishSymbols@2
      displayName: 'Publish symbols path'
      enabled: false
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
        PublishSymbols: false
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Scripts'
      enabled: false
      inputs:
        ArtifactName: Scripts
        PathtoPublish: '$(build.artifactstagingdirectory)\Scripts'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: NugetPackages'
      enabled: false
      inputs:
        ArtifactName: NugetPackages
        PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: LegacyApplication'
      enabled: true
      inputs:
        ArtifactName: LegacyApplication
        PathtoPublish: '$(build.artifactstagingdirectory)\LegacyApplication'

